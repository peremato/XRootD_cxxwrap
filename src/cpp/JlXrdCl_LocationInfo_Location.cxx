// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::LocationInfo::Location> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::LocationInfo::Location> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::LocationInfo::Location
// signature to use in the veto file: XrdCl::LocationInfo::Location
struct JlXrdCl_LocationInfo_Location: public Wrapper {

  JlXrdCl_LocationInfo_Location(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::LocationInfo::Location (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:69:13
    jlcxx::TypeWrapper<XrdCl::LocationInfo::Location>  t = jlModule.add_type<XrdCl::LocationInfo::Location>("XrdCl!LocationInfo!Location");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::LocationInfo::Location>>(new jlcxx::TypeWrapper<XrdCl::LocationInfo::Location>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void XrdCl::LocationInfo::Location::Location(const std::string &, XrdCl::LocationInfo::LocationType, XrdCl::LocationInfo::AccessType) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:76:11
    t.constructor<const std::string &, XrdCl::LocationInfo::LocationType, XrdCl::LocationInfo::AccessType>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("address"), jlcxx::arg("type"), jlcxx::arg("access")    );

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::LocationInfo::Location::GetAddress() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::LocationInfo::Location::GetAddress()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:86:30
    t.method("GetAddress", [](XrdCl::LocationInfo::Location const& a)->const std::string & { return a.GetAddress(); }, jlcxx::arg("this"));
    t.method("GetAddress", [](XrdCl::LocationInfo::Location const* a)->const std::string & { return a->GetAddress(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for XrdCl::LocationInfo::LocationType XrdCl::LocationInfo::Location::GetType() (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::LocationInfo::LocationType XrdCl::LocationInfo::Location::GetType()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:94:24
    t.method("GetType", [](XrdCl::LocationInfo::Location const& a)->XrdCl::LocationInfo::LocationType { return a.GetType(); }, jlcxx::arg("this"));
    t.method("GetType", [](XrdCl::LocationInfo::Location const* a)->XrdCl::LocationInfo::LocationType { return a->GetType(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for XrdCl::LocationInfo::AccessType XrdCl::LocationInfo::Location::GetAccessType() (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::LocationInfo::AccessType XrdCl::LocationInfo::Location::GetAccessType()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:102:22
    t.method("GetAccessType", [](XrdCl::LocationInfo::Location const& a)->XrdCl::LocationInfo::AccessType { return a.GetAccessType(); }, jlcxx::arg("this"));
    t.method("GetAccessType", [](XrdCl::LocationInfo::Location const* a)->XrdCl::LocationInfo::AccessType { return a->GetAccessType(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::LocationInfo::Location::IsServer() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::LocationInfo::Location::IsServer()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:110:16
    t.method("IsServer", [](XrdCl::LocationInfo::Location const& a)->bool { return a.IsServer(); }, jlcxx::arg("this"));
    t.method("IsServer", [](XrdCl::LocationInfo::Location const* a)->bool { return a->IsServer(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::LocationInfo::Location::IsManager() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::LocationInfo::Location::IsManager()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:118:16
    t.method("IsManager", [](XrdCl::LocationInfo::Location const& a)->bool { return a.IsManager(); }, jlcxx::arg("this"));
    t.method("IsManager", [](XrdCl::LocationInfo::Location const* a)->bool { return a->IsManager(); }, jlcxx::arg("this"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::LocationInfo::Location>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_LocationInfo_Location(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_LocationInfo_Location(module));
}
