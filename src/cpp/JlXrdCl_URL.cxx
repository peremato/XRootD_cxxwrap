// this file was auto-generated by wrapit 5168a24
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::URL> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::URL> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::URL
// signature to use in the veto file: XrdCl::URL
struct JlXrdCl_URL: public Wrapper {

  JlXrdCl_URL(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::URL (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:30:9
    jlcxx::TypeWrapper<XrdCl::URL>  t = jlModule.add_type<XrdCl::URL>("XrdCl!URL");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::URL>>(new jlcxx::TypeWrapper<XrdCl::URL>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void XrdCl::URL::URL(const std::string &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:47:7
    t.constructor<const std::string &>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for bool XrdCl::URL::IsValid() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::URL::IsValid()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:60:12
    t.method("IsValid", static_cast<bool (XrdCl::URL::*)()  const>(&XrdCl::URL::IsValid));

    DEBUG_MSG("Adding wrapper for bool XrdCl::URL::IsMetalink() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::URL::IsMetalink()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:65:12
    t.method("IsMetalink", static_cast<bool (XrdCl::URL::*)()  const>(&XrdCl::URL::IsMetalink));

    DEBUG_MSG("Adding wrapper for bool XrdCl::URL::IsLocalFile() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::URL::IsLocalFile()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:71:12
    t.method("IsLocalFile", static_cast<bool (XrdCl::URL::*)()  const>(&XrdCl::URL::IsLocalFile));

    DEBUG_MSG("Adding wrapper for bool XrdCl::URL::IsSecure() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::URL::IsSecure()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:76:12
    t.method("IsSecure", static_cast<bool (XrdCl::URL::*)()  const>(&XrdCl::URL::IsSecure));

    DEBUG_MSG("Adding wrapper for bool XrdCl::URL::IsTPC() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::URL::IsTPC()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:81:12
    t.method("IsTPC", static_cast<bool (XrdCl::URL::*)()  const>(&XrdCl::URL::IsTPC));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetURL() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetURL()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:86:19
    t.method("GetURL", static_cast<std::string (XrdCl::URL::*)()  const>(&XrdCl::URL::GetURL));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetObfuscatedURL() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetObfuscatedURL()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:94:19
    t.method("GetObfuscatedURL", static_cast<std::string (XrdCl::URL::*)()  const>(&XrdCl::URL::GetObfuscatedURL));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetHostId() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetHostId()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:99:19
    t.method("GetHostId", static_cast<std::string (XrdCl::URL::*)()  const>(&XrdCl::URL::GetHostId));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetChannelId() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetChannelId()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:108:19
    t.method("GetChannelId", static_cast<std::string (XrdCl::URL::*)()  const>(&XrdCl::URL::GetChannelId));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetLocation() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetLocation()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:113:19
    t.method("GetLocation", static_cast<std::string (XrdCl::URL::*)()  const>(&XrdCl::URL::GetLocation));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::URL::GetProtocol() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::URL::GetProtocol()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:118:26
    t.method("GetProtocol", static_cast<const std::string & (XrdCl::URL::*)()  const>(&XrdCl::URL::GetProtocol));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::SetProtocol(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::SetProtocol(const std::string &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:126:12
    t.method("SetProtocol", static_cast<void (XrdCl::URL::*)(const std::string &) >(&XrdCl::URL::SetProtocol));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::URL::GetUserName() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::URL::GetUserName()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:135:26
    t.method("GetUserName", static_cast<const std::string & (XrdCl::URL::*)()  const>(&XrdCl::URL::GetUserName));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::SetUserName(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::SetUserName(const std::string &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:143:12
    t.method("SetUserName", static_cast<void (XrdCl::URL::*)(const std::string &) >(&XrdCl::URL::SetUserName));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::URL::GetPassword() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::URL::GetPassword()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:153:26
    t.method("GetPassword", static_cast<const std::string & (XrdCl::URL::*)()  const>(&XrdCl::URL::GetPassword));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::SetPassword(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::SetPassword(const std::string &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:161:12
    t.method("SetPassword", static_cast<void (XrdCl::URL::*)(const std::string &) >(&XrdCl::URL::SetPassword));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::URL::GetHostName() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::URL::GetHostName()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:170:26
    t.method("GetHostName", static_cast<const std::string & (XrdCl::URL::*)()  const>(&XrdCl::URL::GetHostName));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::SetHostName(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::SetHostName(const std::string &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:178:12
    t.method("SetHostName", static_cast<void (XrdCl::URL::*)(const std::string &) >(&XrdCl::URL::SetHostName));

    DEBUG_MSG("Adding wrapper for int XrdCl::URL::GetPort() (" __HERE__ ")");
    // signature to use in the veto list: int XrdCl::URL::GetPort()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:188:11
    t.method("GetPort", static_cast<int (XrdCl::URL::*)()  const>(&XrdCl::URL::GetPort));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::SetPort(int) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::SetPort(int)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:196:12
    t.method("SetPort", static_cast<void (XrdCl::URL::*)(int) >(&XrdCl::URL::SetPort));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::SetHostPort(const std::string &, int) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::SetHostPort(const std::string &, int)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:206:12
    t.method("SetHostPort", static_cast<void (XrdCl::URL::*)(const std::string &, int) >(&XrdCl::URL::SetHostPort));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::URL::GetPath() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::URL::GetPath()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:217:26
    t.method("GetPath", static_cast<const std::string & (XrdCl::URL::*)()  const>(&XrdCl::URL::GetPath));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::SetPath(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::SetPath(const std::string &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:225:12
    t.method("SetPath", static_cast<void (XrdCl::URL::*)(const std::string &) >(&XrdCl::URL::SetPath));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetPathWithParams() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetPathWithParams()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:234:19
    t.method("GetPathWithParams", static_cast<std::string (XrdCl::URL::*)()  const>(&XrdCl::URL::GetPathWithParams));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetPathWithFilteredParams() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetPathWithFilteredParams()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:239:19
    t.method("GetPathWithFilteredParams", static_cast<std::string (XrdCl::URL::*)()  const>(&XrdCl::URL::GetPathWithFilteredParams));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetParamsAsString() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetParamsAsString()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:252:19
    t.method("GetParamsAsString", static_cast<std::string (XrdCl::URL::*)()  const>(&XrdCl::URL::GetParamsAsString));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetLoginToken() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetLoginToken()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:257:19
    t.method("GetLoginToken", static_cast<std::string (XrdCl::URL::*)()  const>(&XrdCl::URL::GetLoginToken));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetParamsAsString(bool) (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetParamsAsString(bool)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:264:19
    t.method("GetParamsAsString", static_cast<std::string (XrdCl::URL::*)(bool)  const>(&XrdCl::URL::GetParamsAsString));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::SetParams(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::SetParams(const std::string &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:269:12
    t.method("SetParams", static_cast<void (XrdCl::URL::*)(const std::string &) >(&XrdCl::URL::SetParams));

    DEBUG_MSG("Adding wrapper for bool XrdCl::URL::FromString(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::URL::FromString(const std::string &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:283:12
    t.method("FromString", static_cast<bool (XrdCl::URL::*)(const std::string &) >(&XrdCl::URL::FromString));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::Clear() (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::Clear()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClURL.hh:288:12
    t.method("Clear", static_cast<void (XrdCl::URL::*)() >(&XrdCl::URL::Clear));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::URL>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_URL(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_URL(module));
}
