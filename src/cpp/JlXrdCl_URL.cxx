// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::URL> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::URL> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::URL
// signature to use in the veto file: XrdCl::URL
struct JlXrdCl_URL: public Wrapper {

  JlXrdCl_URL(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::URL (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:30:9
    jlcxx::TypeWrapper<XrdCl::URL>  t = jlModule.add_type<XrdCl::URL>("XrdCl!URL");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::URL>>(new jlcxx::TypeWrapper<XrdCl::URL>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );


    DEBUG_MSG("Adding wrapper for void XrdCl::URL::URL(const std::string &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:47:7
    t.constructor<const std::string &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("url")    );

    DEBUG_MSG("Adding wrapper for bool XrdCl::URL::IsValid() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::URL::IsValid()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:60:12
    t.method("IsValid", [](XrdCl::URL const& a)->bool { return a.IsValid(); }, jlcxx::arg("this"));
    t.method("IsValid", [](XrdCl::URL const* a)->bool { return a->IsValid(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::URL::IsMetalink() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::URL::IsMetalink()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:65:12
    t.method("IsMetalink", [](XrdCl::URL const& a)->bool { return a.IsMetalink(); }, jlcxx::arg("this"));
    t.method("IsMetalink", [](XrdCl::URL const* a)->bool { return a->IsMetalink(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::URL::IsLocalFile() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::URL::IsLocalFile()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:71:12
    t.method("IsLocalFile", [](XrdCl::URL const& a)->bool { return a.IsLocalFile(); }, jlcxx::arg("this"));
    t.method("IsLocalFile", [](XrdCl::URL const* a)->bool { return a->IsLocalFile(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::URL::IsSecure() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::URL::IsSecure()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:76:12
    t.method("IsSecure", [](XrdCl::URL const& a)->bool { return a.IsSecure(); }, jlcxx::arg("this"));
    t.method("IsSecure", [](XrdCl::URL const* a)->bool { return a->IsSecure(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::URL::IsTPC() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::URL::IsTPC()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:81:12
    t.method("IsTPC", [](XrdCl::URL const& a)->bool { return a.IsTPC(); }, jlcxx::arg("this"));
    t.method("IsTPC", [](XrdCl::URL const* a)->bool { return a->IsTPC(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetURL() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetURL()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:86:19
    t.method("GetURL", [](XrdCl::URL const& a)->std::string { return a.GetURL(); }, jlcxx::arg("this"));
    t.method("GetURL", [](XrdCl::URL const* a)->std::string { return a->GetURL(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetObfuscatedURL() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetObfuscatedURL()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:94:19
    t.method("GetObfuscatedURL", [](XrdCl::URL const& a)->std::string { return a.GetObfuscatedURL(); }, jlcxx::arg("this"));
    t.method("GetObfuscatedURL", [](XrdCl::URL const* a)->std::string { return a->GetObfuscatedURL(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetHostId() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetHostId()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:99:19
    t.method("GetHostId", [](XrdCl::URL const& a)->std::string { return a.GetHostId(); }, jlcxx::arg("this"));
    t.method("GetHostId", [](XrdCl::URL const* a)->std::string { return a->GetHostId(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetChannelId() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetChannelId()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:108:19
    t.method("GetChannelId", [](XrdCl::URL const& a)->std::string { return a.GetChannelId(); }, jlcxx::arg("this"));
    t.method("GetChannelId", [](XrdCl::URL const* a)->std::string { return a->GetChannelId(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetLocation() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetLocation()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:113:19
    t.method("GetLocation", [](XrdCl::URL const& a)->std::string { return a.GetLocation(); }, jlcxx::arg("this"));
    t.method("GetLocation", [](XrdCl::URL const* a)->std::string { return a->GetLocation(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::URL::GetProtocol() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::URL::GetProtocol()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:118:26
    t.method("GetProtocol", [](XrdCl::URL const& a)->const std::string & { return a.GetProtocol(); }, jlcxx::arg("this"));
    t.method("GetProtocol", [](XrdCl::URL const* a)->const std::string & { return a->GetProtocol(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::SetProtocol(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::SetProtocol(const std::string &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:126:12
    t.method("SetProtocol", [](XrdCl::URL& a, const std::string & arg0)->void { a.SetProtocol(arg0); }, jlcxx::arg("this"), jlcxx::arg("protocol"));
    t.method("SetProtocol", [](XrdCl::URL* a, const std::string & arg0)->void { a->SetProtocol(arg0); }, jlcxx::arg("this"), jlcxx::arg("protocol"));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::URL::GetUserName() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::URL::GetUserName()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:135:26
    t.method("GetUserName", [](XrdCl::URL const& a)->const std::string & { return a.GetUserName(); }, jlcxx::arg("this"));
    t.method("GetUserName", [](XrdCl::URL const* a)->const std::string & { return a->GetUserName(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::SetUserName(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::SetUserName(const std::string &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:143:12
    t.method("SetUserName", [](XrdCl::URL& a, const std::string & arg0)->void { a.SetUserName(arg0); }, jlcxx::arg("this"), jlcxx::arg("userName"));
    t.method("SetUserName", [](XrdCl::URL* a, const std::string & arg0)->void { a->SetUserName(arg0); }, jlcxx::arg("this"), jlcxx::arg("userName"));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::URL::GetPassword() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::URL::GetPassword()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:153:26
    t.method("GetPassword", [](XrdCl::URL const& a)->const std::string & { return a.GetPassword(); }, jlcxx::arg("this"));
    t.method("GetPassword", [](XrdCl::URL const* a)->const std::string & { return a->GetPassword(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::SetPassword(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::SetPassword(const std::string &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:161:12
    t.method("SetPassword", [](XrdCl::URL& a, const std::string & arg0)->void { a.SetPassword(arg0); }, jlcxx::arg("this"), jlcxx::arg("password"));
    t.method("SetPassword", [](XrdCl::URL* a, const std::string & arg0)->void { a->SetPassword(arg0); }, jlcxx::arg("this"), jlcxx::arg("password"));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::URL::GetHostName() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::URL::GetHostName()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:170:26
    t.method("GetHostName", [](XrdCl::URL const& a)->const std::string & { return a.GetHostName(); }, jlcxx::arg("this"));
    t.method("GetHostName", [](XrdCl::URL const* a)->const std::string & { return a->GetHostName(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::SetHostName(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::SetHostName(const std::string &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:178:12
    t.method("SetHostName", [](XrdCl::URL& a, const std::string & arg0)->void { a.SetHostName(arg0); }, jlcxx::arg("this"), jlcxx::arg("hostName"));
    t.method("SetHostName", [](XrdCl::URL* a, const std::string & arg0)->void { a->SetHostName(arg0); }, jlcxx::arg("this"), jlcxx::arg("hostName"));

    DEBUG_MSG("Adding wrapper for int XrdCl::URL::GetPort() (" __HERE__ ")");
    // signature to use in the veto list: int XrdCl::URL::GetPort()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:188:11
    t.method("GetPort", [](XrdCl::URL const& a)->int { return a.GetPort(); }, jlcxx::arg("this"));
    t.method("GetPort", [](XrdCl::URL const* a)->int { return a->GetPort(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::SetPort(int) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::SetPort(int)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:196:12
    t.method("SetPort", [](XrdCl::URL& a, int arg0)->void { a.SetPort(arg0); }, jlcxx::arg("this"), jlcxx::arg("port"));
    t.method("SetPort", [](XrdCl::URL* a, int arg0)->void { a->SetPort(arg0); }, jlcxx::arg("this"), jlcxx::arg("port"));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::SetHostPort(const std::string &, int) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::SetHostPort(const std::string &, int)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:206:12
    t.method("SetHostPort", [](XrdCl::URL& a, const std::string & arg0, int arg1)->void { a.SetHostPort(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("hostName"), jlcxx::arg("port"));
    t.method("SetHostPort", [](XrdCl::URL* a, const std::string & arg0, int arg1)->void { a->SetHostPort(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("hostName"), jlcxx::arg("port"));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::URL::GetPath() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::URL::GetPath()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:217:26
    t.method("GetPath", [](XrdCl::URL const& a)->const std::string & { return a.GetPath(); }, jlcxx::arg("this"));
    t.method("GetPath", [](XrdCl::URL const* a)->const std::string & { return a->GetPath(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::SetPath(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::SetPath(const std::string &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:225:12
    t.method("SetPath", [](XrdCl::URL& a, const std::string & arg0)->void { a.SetPath(arg0); }, jlcxx::arg("this"), jlcxx::arg("path"));
    t.method("SetPath", [](XrdCl::URL* a, const std::string & arg0)->void { a->SetPath(arg0); }, jlcxx::arg("this"), jlcxx::arg("path"));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetPathWithParams() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetPathWithParams()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:234:19
    t.method("GetPathWithParams", [](XrdCl::URL const& a)->std::string { return a.GetPathWithParams(); }, jlcxx::arg("this"));
    t.method("GetPathWithParams", [](XrdCl::URL const* a)->std::string { return a->GetPathWithParams(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetPathWithFilteredParams() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetPathWithFilteredParams()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:239:19
    t.method("GetPathWithFilteredParams", [](XrdCl::URL const& a)->std::string { return a.GetPathWithFilteredParams(); }, jlcxx::arg("this"));
    t.method("GetPathWithFilteredParams", [](XrdCl::URL const* a)->std::string { return a->GetPathWithFilteredParams(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetParamsAsString() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetParamsAsString()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:252:19
    t.method("GetParamsAsString", [](XrdCl::URL const& a)->std::string { return a.GetParamsAsString(); }, jlcxx::arg("this"));
    t.method("GetParamsAsString", [](XrdCl::URL const* a)->std::string { return a->GetParamsAsString(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetLoginToken() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetLoginToken()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:257:19
    t.method("GetLoginToken", [](XrdCl::URL const& a)->std::string { return a.GetLoginToken(); }, jlcxx::arg("this"));
    t.method("GetLoginToken", [](XrdCl::URL const* a)->std::string { return a->GetLoginToken(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::URL::GetParamsAsString(bool) (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::URL::GetParamsAsString(bool)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:264:19
    t.method("GetParamsAsString", [](XrdCl::URL const& a, bool arg0)->std::string { return a.GetParamsAsString(arg0); }, jlcxx::arg("this"), jlcxx::arg("filter"));
    t.method("GetParamsAsString", [](XrdCl::URL const* a, bool arg0)->std::string { return a->GetParamsAsString(arg0); }, jlcxx::arg("this"), jlcxx::arg("filter"));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::SetParams(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::SetParams(const std::string &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:269:12
    t.method("SetParams", [](XrdCl::URL& a, const std::string & arg0)->void { a.SetParams(arg0); }, jlcxx::arg("this"), jlcxx::arg("params"));
    t.method("SetParams", [](XrdCl::URL* a, const std::string & arg0)->void { a->SetParams(arg0); }, jlcxx::arg("this"), jlcxx::arg("params"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::URL::FromString(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::URL::FromString(const std::string &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:283:12
    t.method("FromString", [](XrdCl::URL& a, const std::string & arg0)->bool { return a.FromString(arg0); }, jlcxx::arg("this"), jlcxx::arg("url"));
    t.method("FromString", [](XrdCl::URL* a, const std::string & arg0)->bool { return a->FromString(arg0); }, jlcxx::arg("this"), jlcxx::arg("url"));

    DEBUG_MSG("Adding wrapper for void XrdCl::URL::Clear() (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::URL::Clear()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClURL.hh:288:12
    t.method("Clear", [](XrdCl::URL& a)->void { a.Clear(); }, jlcxx::arg("this"));
    t.method("Clear", [](XrdCl::URL* a)->void { a->Clear(); }, jlcxx::arg("this"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::URL>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_URL(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_URL(module));
}
