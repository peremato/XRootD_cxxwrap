// this file was auto-generated by wrapit 5168a24
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::RetryInfo> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::RetryInfo> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::RetryInfo
// signature to use in the veto file: XrdCl::RetryInfo
struct JlXrdCl_RetryInfo: public Wrapper {

  JlXrdCl_RetryInfo(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::RetryInfo (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1017:10
    jlcxx::TypeWrapper<XrdCl::RetryInfo>  t = jlModule.add_type<XrdCl::RetryInfo>("XrdCl!RetryInfo");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::RetryInfo>>(new jlcxx::TypeWrapper<XrdCl::RetryInfo>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for bool XrdCl::RetryInfo::NeedRetry() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::RetryInfo::NeedRetry()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1032:10
    t.method("NeedRetry", static_cast<bool (XrdCl::RetryInfo::*)() >(&XrdCl::RetryInfo::NeedRetry));

    DEBUG_MSG("Adding wrapper for size_t XrdCl::RetryInfo::Size() (" __HERE__ ")");
    // signature to use in the veto list: size_t XrdCl::RetryInfo::Size()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1037:12
    t.method("Size", static_cast<size_t (XrdCl::RetryInfo::*)() >(&XrdCl::RetryInfo::Size));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::RetryInfo>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_RetryInfo(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_RetryInfo(module));
}
