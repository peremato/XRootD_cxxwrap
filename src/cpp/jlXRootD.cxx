// this file was auto-generated by wrapit 5168a24
#include "jlcxx/jlcxx.hpp"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

#include "jlXRootD.h"

#include <regex>

#include "dbg_msg.h"
#include "Wrapper.h"

class JlXrdCl_Buffer;
class JlXrdCl_Status;
class JlXrdCl_URL;
class JlXrdCl_LocationInfo;
class JlXrdCl_LocationInfo_Location;
class JlXrdCl_XRootDStatus;
class JlXrdCl_XAttrStatus;
class JlXrdCl_XAttr;
class JlXrdCl_ProtocolInfo;
class JlXrdCl_StatInfo;
class JlXrdCl_StatInfoVFS;
class JlXrdCl_DirectoryList;
class JlXrdCl_DirectoryList_ListEntry;
class JlXrdCl_OpenInfo;
class JlXrdCl_ChunkInfo;
class JlXrdCl_PageInfo;
class JlXrdCl_RetryInfo;
class JlXrdCl_VectorReadInfo;
class JlXrdCl_HostInfo;
class JlXrdCl_ResponseHandler;
class JlXrdCl_AnyObject;
class JlXrdCl_PropertyList;
class JlXrdCl_QueryCode;
class JlXrdCl_OpenFlags;
class JlXrdCl_Access;
class JlXrdCl_MkDirFlags;
class JlXrdCl_DirListFlags;
class JlXrdCl_PrepareFlags;
class JlXrdCl_FileSystem;
class JlXrdCl_File;
class Jliovec;
class JlXrdCl_CopyProgressHandler;
class JlXrdCl_CopyProcess;
class JlGlobal;

std::shared_ptr<Wrapper> newJlXrdCl_Buffer(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_Status(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_URL(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_LocationInfo(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_LocationInfo_Location(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_XRootDStatus(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_XAttrStatus(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_XAttr(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_ProtocolInfo(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_StatInfo(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_StatInfoVFS(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_DirectoryList(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_DirectoryList_ListEntry(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_OpenInfo(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_ChunkInfo(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_PageInfo(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_RetryInfo(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_VectorReadInfo(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_HostInfo(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_ResponseHandler(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_AnyObject(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_PropertyList(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_QueryCode(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_OpenFlags(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_Access(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_MkDirFlags(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_DirListFlags(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_PrepareFlags(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_FileSystem(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_File(jlcxx::Module&);
std::shared_ptr<Wrapper> newJliovec(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_CopyProgressHandler(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlXrdCl_CopyProcess(jlcxx::Module&);
std::shared_ptr<Wrapper> newJlGlobal(jlcxx::Module&);
//method from libcxxwrap returning its version
extern "C" JLCXX_API const char* cxxwrap_version_string();

//Check the code is compiled with a compatible version of libcxxwrap:
static_assert(1000*1000*JLCXX_VERSION_MAJOR  + 1000 * JLCXX_VERSION_MINOR + JLCXX_VERSION_PATCH >= 12000
  && 1000 * 1000 * JLCXX_VERSION_MAJOR  + 1000 * JLCXX_VERSION_MINOR + JLCXX_VERSION_PATCH < 14000,
  "The code was generated with WrapIt! for "
  "a different CxxWrap version (controlled with the cxxwrap_version parameter).");

//Check the version of loaded libcxxwrap library:
void throw_if_version_incompatibility(){
  std::string version_str = cxxwrap_version_string();
  static std::regex r("([[:digit:]]{1,3})\\.([[:digit:]]{1,3})\\.([[:digit:]]{1,3})");
  std::smatch matches;
  if(!std::regex_match(version_str, matches, r)){
    std::cerr << "Warning: Failed to check libcxxwrap version.";
  } else{    long version_int =   1000*1000*strtol(matches[1].str().c_str(), 0, 10)
                       +      1000*strtol(matches[2].str().c_str(), 0, 10)
                       +           strtol(matches[3].str().c_str(), 0, 10);
    if(version_int < 12000 || version_int >= 14000){
      throw std::runtime_error(std::string("Found libcxxwrap_jll version ")
       + version_str + ", while module XRootD requires a version in "
      "[0.12.0, 0.14.0)."
      " Note: if the module was installed with the package manager, the Project.toml file "
      "of the package is probably missing a compat specification that would have prevented "
      "the inconsistency.");
    }
  }
}


JLCXX_MODULE define_julia_module(jlcxx::Module& jlModule){
  
throw_if_version_incompatibility();

  std::vector<std::shared_ptr<Wrapper>> wrappers = {
    std::shared_ptr<Wrapper>(newJlXrdCl_Buffer(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_Status(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_URL(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_LocationInfo(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_LocationInfo_Location(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_XRootDStatus(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_XAttrStatus(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_XAttr(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_ProtocolInfo(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_StatInfo(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_StatInfoVFS(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_DirectoryList(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_DirectoryList_ListEntry(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_OpenInfo(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_ChunkInfo(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_PageInfo(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_RetryInfo(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_VectorReadInfo(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_HostInfo(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_ResponseHandler(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_AnyObject(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_PropertyList(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_QueryCode(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_OpenFlags(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_Access(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_MkDirFlags(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_DirListFlags(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_PrepareFlags(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_FileSystem(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_File(jlModule)),
    std::shared_ptr<Wrapper>(newJliovec(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_CopyProgressHandler(jlModule)),
    std::shared_ptr<Wrapper>(newJlXrdCl_CopyProcess(jlModule)),
    std::shared_ptr<Wrapper>(newJlGlobal(jlModule))
  };

  DEBUG_MSG("Adding wrapper for enum XrdCl::LocationInfo::LocationType (" __HERE__ ")");
  // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:49:12
  jlModule.add_bits<XrdCl::LocationInfo::LocationType>("XrdCl!LocationInfo!LocationType", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("XrdCl!LocationInfo!ManagerOnline", XrdCl::LocationInfo::ManagerOnline);
  jlModule.set_const("XrdCl!LocationInfo!ManagerPending", XrdCl::LocationInfo::ManagerPending);
  jlModule.set_const("XrdCl!LocationInfo!ServerOnline", XrdCl::LocationInfo::ServerOnline);
  jlModule.set_const("XrdCl!LocationInfo!ServerPending", XrdCl::LocationInfo::ServerPending);

  DEBUG_MSG("Adding wrapper for enum XrdCl::LocationInfo::AccessType (" __HERE__ ")");
  // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:60:12
  jlModule.add_bits<XrdCl::LocationInfo::AccessType>("XrdCl!LocationInfo!AccessType", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("XrdCl!LocationInfo!Read", XrdCl::LocationInfo::Read);
  jlModule.set_const("XrdCl!LocationInfo!ReadWrite", XrdCl::LocationInfo::ReadWrite);

  DEBUG_MSG("Adding anonymous enum defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:280:3 (" __HERE__ ")");
  // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:280:3
  jlModule.set_const("XrdCl!xattr_name", static_cast<int>(XrdCl::xattr_name));
  jlModule.set_const("XrdCl!xattr_value", static_cast<int>(XrdCl::xattr_value));

  DEBUG_MSG("Adding wrapper for enum XrdCl::ProtocolInfo::HostTypes (" __HERE__ ")");
  // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:347:12
  jlModule.add_bits<XrdCl::ProtocolInfo::HostTypes>("XrdCl!ProtocolInfo!HostTypes", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("XrdCl!ProtocolInfo!IsManager", XrdCl::ProtocolInfo::IsManager);
  jlModule.set_const("XrdCl!ProtocolInfo!IsServer", XrdCl::ProtocolInfo::IsServer);
  jlModule.set_const("XrdCl!ProtocolInfo!AttrMeta", XrdCl::ProtocolInfo::AttrMeta);
  jlModule.set_const("XrdCl!ProtocolInfo!AttrProxy", XrdCl::ProtocolInfo::AttrProxy);
  jlModule.set_const("XrdCl!ProtocolInfo!AttrSuper", XrdCl::ProtocolInfo::AttrSuper);

  DEBUG_MSG("Adding wrapper for enum XrdCl::StatInfo::Flags (" __HERE__ ")");
  // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:405:12
  jlModule.add_bits<XrdCl::StatInfo::Flags>("XrdCl!StatInfo!Flags", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("XrdCl!StatInfo!XBitSet", XrdCl::StatInfo::XBitSet);
  jlModule.set_const("XrdCl!StatInfo!IsDir", XrdCl::StatInfo::IsDir);
  jlModule.set_const("XrdCl!StatInfo!Other", XrdCl::StatInfo::Other);
  jlModule.set_const("XrdCl!StatInfo!Offline", XrdCl::StatInfo::Offline);
  jlModule.set_const("XrdCl!StatInfo!POSCPending", XrdCl::StatInfo::POSCPending);
  jlModule.set_const("XrdCl!StatInfo!IsReadable", XrdCl::StatInfo::IsReadable);
  jlModule.set_const("XrdCl!StatInfo!IsWritable", XrdCl::StatInfo::IsWritable);
  jlModule.set_const("XrdCl!StatInfo!BackUpExists", XrdCl::StatInfo::BackUpExists);

  DEBUG_MSG("Adding wrapper for enum XrdCl::QueryCode::Code (" __HERE__ ")");
  // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFileSystem.hh:52:10
  jlModule.add_bits<XrdCl::QueryCode::Code>("XrdCl!QueryCode!Code", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("XrdCl!QueryCode!Config", XrdCl::QueryCode::Config);
  jlModule.set_const("XrdCl!QueryCode!ChecksumCancel", XrdCl::QueryCode::ChecksumCancel);
  jlModule.set_const("XrdCl!QueryCode!Checksum", XrdCl::QueryCode::Checksum);
  jlModule.set_const("XrdCl!QueryCode!Opaque", XrdCl::QueryCode::Opaque);
  jlModule.set_const("XrdCl!QueryCode!OpaqueFile", XrdCl::QueryCode::OpaqueFile);
  jlModule.set_const("XrdCl!QueryCode!Prepare", XrdCl::QueryCode::Prepare);
  jlModule.set_const("XrdCl!QueryCode!Space", XrdCl::QueryCode::Space);
  jlModule.set_const("XrdCl!QueryCode!Stats", XrdCl::QueryCode::Stats);
  jlModule.set_const("XrdCl!QueryCode!Visa", XrdCl::QueryCode::Visa);
  jlModule.set_const("XrdCl!QueryCode!XAttr", XrdCl::QueryCode::XAttr);

  DEBUG_MSG("Adding wrapper for enum XrdCl::OpenFlags::Flags (" __HERE__ ")");
  // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFileSystem.hh:75:10
  jlModule.add_bits<XrdCl::OpenFlags::Flags>("XrdCl!OpenFlags!Flags", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("XrdCl!OpenFlags!None", XrdCl::OpenFlags::None);
  jlModule.set_const("XrdCl!OpenFlags!Compress", XrdCl::OpenFlags::Compress);
  jlModule.set_const("XrdCl!OpenFlags!Delete", XrdCl::OpenFlags::Delete);
  jlModule.set_const("XrdCl!OpenFlags!Force", XrdCl::OpenFlags::Force);
  jlModule.set_const("XrdCl!OpenFlags!MakePath", XrdCl::OpenFlags::MakePath);
  jlModule.set_const("XrdCl!OpenFlags!New", XrdCl::OpenFlags::New);
  jlModule.set_const("XrdCl!OpenFlags!NoWait", XrdCl::OpenFlags::NoWait);
  jlModule.set_const("XrdCl!OpenFlags!Read", XrdCl::OpenFlags::Read);
  jlModule.set_const("XrdCl!OpenFlags!Update", XrdCl::OpenFlags::Update);
  jlModule.set_const("XrdCl!OpenFlags!Write", XrdCl::OpenFlags::Write);
  jlModule.set_const("XrdCl!OpenFlags!POSC", XrdCl::OpenFlags::POSC);
  jlModule.set_const("XrdCl!OpenFlags!Refresh", XrdCl::OpenFlags::Refresh);
  jlModule.set_const("XrdCl!OpenFlags!Replica", XrdCl::OpenFlags::Replica);
  jlModule.set_const("XrdCl!OpenFlags!SeqIO", XrdCl::OpenFlags::SeqIO);
  jlModule.set_const("XrdCl!OpenFlags!PrefName", XrdCl::OpenFlags::PrefName);
  jlModule.set_const("XrdCl!OpenFlags!IntentDirList", XrdCl::OpenFlags::IntentDirList);

  DEBUG_MSG("Adding wrapper for enum XrdCl::Access::Mode (" __HERE__ ")");
  // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFileSystem.hh:121:10
  jlModule.add_bits<XrdCl::Access::Mode>("XrdCl!Access!Mode", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("XrdCl!Access!None", XrdCl::Access::None);
  jlModule.set_const("XrdCl!Access!UR", XrdCl::Access::UR);
  jlModule.set_const("XrdCl!Access!UW", XrdCl::Access::UW);
  jlModule.set_const("XrdCl!Access!UX", XrdCl::Access::UX);
  jlModule.set_const("XrdCl!Access!GR", XrdCl::Access::GR);
  jlModule.set_const("XrdCl!Access!GW", XrdCl::Access::GW);
  jlModule.set_const("XrdCl!Access!GX", XrdCl::Access::GX);
  jlModule.set_const("XrdCl!Access!OR", XrdCl::Access::OR);
  jlModule.set_const("XrdCl!Access!OW", XrdCl::Access::OW);
  jlModule.set_const("XrdCl!Access!OX", XrdCl::Access::OX);

  DEBUG_MSG("Adding wrapper for enum XrdCl::MkDirFlags::Flags (" __HERE__ ")");
  // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFileSystem.hh:142:10
  jlModule.add_bits<XrdCl::MkDirFlags::Flags>("XrdCl!MkDirFlags!Flags", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("XrdCl!MkDirFlags!None", XrdCl::MkDirFlags::None);
  jlModule.set_const("XrdCl!MkDirFlags!MakePath", XrdCl::MkDirFlags::MakePath);

  DEBUG_MSG("Adding wrapper for enum XrdCl::DirListFlags::Flags (" __HERE__ ")");
  // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFileSystem.hh:155:10
  jlModule.add_bits<XrdCl::DirListFlags::Flags>("XrdCl!DirListFlags!Flags", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("XrdCl!DirListFlags!None", XrdCl::DirListFlags::None);
  jlModule.set_const("XrdCl!DirListFlags!Stat", XrdCl::DirListFlags::Stat);
  jlModule.set_const("XrdCl!DirListFlags!Locate", XrdCl::DirListFlags::Locate);
  jlModule.set_const("XrdCl!DirListFlags!Recursive", XrdCl::DirListFlags::Recursive);
  jlModule.set_const("XrdCl!DirListFlags!Merge", XrdCl::DirListFlags::Merge);
  jlModule.set_const("XrdCl!DirListFlags!Chunked", XrdCl::DirListFlags::Chunked);
  jlModule.set_const("XrdCl!DirListFlags!Zip", XrdCl::DirListFlags::Zip);
  jlModule.set_const("XrdCl!DirListFlags!Cksm", XrdCl::DirListFlags::Cksm);

  DEBUG_MSG("Adding wrapper for enum XrdCl::PrepareFlags::Flags (" __HERE__ ")");
  // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFileSystem.hh:175:10
  jlModule.add_bits<XrdCl::PrepareFlags::Flags>("XrdCl!PrepareFlags!Flags", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("XrdCl!PrepareFlags!None", XrdCl::PrepareFlags::None);
  jlModule.set_const("XrdCl!PrepareFlags!Colocate", XrdCl::PrepareFlags::Colocate);
  jlModule.set_const("XrdCl!PrepareFlags!Fresh", XrdCl::PrepareFlags::Fresh);
  jlModule.set_const("XrdCl!PrepareFlags!Stage", XrdCl::PrepareFlags::Stage);
  jlModule.set_const("XrdCl!PrepareFlags!WriteMode", XrdCl::PrepareFlags::WriteMode);
  jlModule.set_const("XrdCl!PrepareFlags!Cancel", XrdCl::PrepareFlags::Cancel);
  jlModule.set_const("XrdCl!PrepareFlags!Evict", XrdCl::PrepareFlags::Evict);

  DEBUG_MSG("Adding wrapper for enum XrdCl::File::VirtRedirect (" __HERE__ ")");
  // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:49:12
  jlModule.add_bits<XrdCl::File::VirtRedirect>("XrdCl!File!VirtRedirect", jlcxx::julia_type("CppEnum"));
  jlModule.set_const("XrdCl!File!EnableVirtRedirect", XrdCl::File::EnableVirtRedirect);
  jlModule.set_const("XrdCl!File!DisableVirtRedirect", XrdCl::File::DisableVirtRedirect);
  for(const auto& w: wrappers) w->add_methods();

}
