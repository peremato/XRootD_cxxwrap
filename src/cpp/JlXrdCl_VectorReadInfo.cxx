// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::VectorReadInfo> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::VectorReadInfo> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::VectorReadInfo
// signature to use in the veto file: XrdCl::VectorReadInfo
struct JlXrdCl_VectorReadInfo: public Wrapper {

  JlXrdCl_VectorReadInfo(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::VectorReadInfo (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1061:9
    jlcxx::TypeWrapper<XrdCl::VectorReadInfo>  t = jlModule.add_type<XrdCl::VectorReadInfo>("XrdCl!VectorReadInfo");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::VectorReadInfo>>(new jlcxx::TypeWrapper<XrdCl::VectorReadInfo>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );

    DEBUG_MSG("Adding wrapper for uint32_t XrdCl::VectorReadInfo::GetSize() (" __HERE__ ")");
    // signature to use in the veto list: uint32_t XrdCl::VectorReadInfo::GetSize()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1072:16
    t.method("GetSize", [](XrdCl::VectorReadInfo const& a)->uint32_t { return a.GetSize(); }, jlcxx::arg("this"));
    t.method("GetSize", [](XrdCl::VectorReadInfo const* a)->uint32_t { return a->GetSize(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void XrdCl::VectorReadInfo::SetSize(uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::VectorReadInfo::SetSize(uint32_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1080:12
    t.method("SetSize", [](XrdCl::VectorReadInfo& a, uint32_t arg0)->void { a.SetSize(arg0); }, jlcxx::arg("this"), jlcxx::arg("size"));
    t.method("SetSize", [](XrdCl::VectorReadInfo* a, uint32_t arg0)->void { a->SetSize(arg0); }, jlcxx::arg("this"), jlcxx::arg("size"));

    DEBUG_MSG("Adding wrapper for XrdCl::ChunkList & XrdCl::VectorReadInfo::GetChunks() (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::ChunkList & XrdCl::VectorReadInfo::GetChunks()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1088:18
    t.method("GetChunks", [](XrdCl::VectorReadInfo& a)->XrdCl::ChunkList & { return a.GetChunks(); }, jlcxx::arg("this"));
    t.method("GetChunks", [](XrdCl::VectorReadInfo* a)->XrdCl::ChunkList & { return a->GetChunks(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const XrdCl::ChunkList & XrdCl::VectorReadInfo::GetChunks() (" __HERE__ ")");
    // signature to use in the veto list: const XrdCl::ChunkList & XrdCl::VectorReadInfo::GetChunks()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1096:24
    t.method("GetChunks", [](XrdCl::VectorReadInfo const& a)->const XrdCl::ChunkList & { return a.GetChunks(); }, jlcxx::arg("this"));
    t.method("GetChunks", [](XrdCl::VectorReadInfo const* a)->const XrdCl::ChunkList & { return a->GetChunks(); }, jlcxx::arg("this"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::VectorReadInfo>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_VectorReadInfo(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_VectorReadInfo(module));
}
