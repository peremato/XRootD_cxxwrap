// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::StatInfoVFS> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::StatInfoVFS> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::StatInfoVFS
// signature to use in the veto file: XrdCl::StatInfoVFS
struct JlXrdCl_StatInfoVFS: public Wrapper {

  JlXrdCl_StatInfoVFS(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::StatInfoVFS (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:573:9
    jlcxx::TypeWrapper<XrdCl::StatInfoVFS>  t = jlModule.add_type<XrdCl::StatInfoVFS>("XrdCl!StatInfoVFS");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::StatInfoVFS>>(new jlcxx::TypeWrapper<XrdCl::StatInfoVFS>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );

    DEBUG_MSG("Adding wrapper for uint64_t XrdCl::StatInfoVFS::GetNodesRW() (" __HERE__ ")");
    // signature to use in the veto list: uint64_t XrdCl::StatInfoVFS::GetNodesRW()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:584:16
    t.method("GetNodesRW", [](XrdCl::StatInfoVFS const& a)->uint64_t { return a.GetNodesRW(); }, jlcxx::arg("this"));
    t.method("GetNodesRW", [](XrdCl::StatInfoVFS const* a)->uint64_t { return a->GetNodesRW(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for uint64_t XrdCl::StatInfoVFS::GetFreeRW() (" __HERE__ ")");
    // signature to use in the veto list: uint64_t XrdCl::StatInfoVFS::GetFreeRW()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:592:16
    t.method("GetFreeRW", [](XrdCl::StatInfoVFS const& a)->uint64_t { return a.GetFreeRW(); }, jlcxx::arg("this"));
    t.method("GetFreeRW", [](XrdCl::StatInfoVFS const* a)->uint64_t { return a->GetFreeRW(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for uint8_t XrdCl::StatInfoVFS::GetUtilizationRW() (" __HERE__ ")");
    // signature to use in the veto list: uint8_t XrdCl::StatInfoVFS::GetUtilizationRW()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:600:15
    t.method("GetUtilizationRW", [](XrdCl::StatInfoVFS const& a)->uint8_t { return a.GetUtilizationRW(); }, jlcxx::arg("this"));
    t.method("GetUtilizationRW", [](XrdCl::StatInfoVFS const* a)->uint8_t { return a->GetUtilizationRW(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for uint64_t XrdCl::StatInfoVFS::GetNodesStaging() (" __HERE__ ")");
    // signature to use in the veto list: uint64_t XrdCl::StatInfoVFS::GetNodesStaging()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:608:16
    t.method("GetNodesStaging", [](XrdCl::StatInfoVFS const& a)->uint64_t { return a.GetNodesStaging(); }, jlcxx::arg("this"));
    t.method("GetNodesStaging", [](XrdCl::StatInfoVFS const* a)->uint64_t { return a->GetNodesStaging(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for uint64_t XrdCl::StatInfoVFS::GetFreeStaging() (" __HERE__ ")");
    // signature to use in the veto list: uint64_t XrdCl::StatInfoVFS::GetFreeStaging()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:616:16
    t.method("GetFreeStaging", [](XrdCl::StatInfoVFS const& a)->uint64_t { return a.GetFreeStaging(); }, jlcxx::arg("this"));
    t.method("GetFreeStaging", [](XrdCl::StatInfoVFS const* a)->uint64_t { return a->GetFreeStaging(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for uint8_t XrdCl::StatInfoVFS::GetUtilizationStaging() (" __HERE__ ")");
    // signature to use in the veto list: uint8_t XrdCl::StatInfoVFS::GetUtilizationStaging()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:624:15
    t.method("GetUtilizationStaging", [](XrdCl::StatInfoVFS const& a)->uint8_t { return a.GetUtilizationStaging(); }, jlcxx::arg("this"));
    t.method("GetUtilizationStaging", [](XrdCl::StatInfoVFS const* a)->uint8_t { return a->GetUtilizationStaging(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::StatInfoVFS::ParseServerResponse(const char *) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::StatInfoVFS::ParseServerResponse(const char *)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:632:12
    t.method("ParseServerResponse", [](XrdCl::StatInfoVFS& a, const char * arg0)->bool { return a.ParseServerResponse(arg0); }, jlcxx::arg("this"), jlcxx::arg("data"));
    t.method("ParseServerResponse", [](XrdCl::StatInfoVFS* a, const char * arg0)->bool { return a->ParseServerResponse(arg0); }, jlcxx::arg("this"), jlcxx::arg("data"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::StatInfoVFS>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_StatInfoVFS(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_StatInfoVFS(module));
}
