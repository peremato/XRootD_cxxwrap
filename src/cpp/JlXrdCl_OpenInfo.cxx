// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::OpenInfo> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::OpenInfo> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::OpenInfo
// signature to use in the veto file: XrdCl::OpenInfo
struct JlXrdCl_OpenInfo: public Wrapper {

  JlXrdCl_OpenInfo(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::OpenInfo (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:862:9
    jlcxx::TypeWrapper<XrdCl::OpenInfo>  t = jlModule.add_type<XrdCl::OpenInfo>("XrdCl!OpenInfo");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::OpenInfo>>(new jlcxx::TypeWrapper<XrdCl::OpenInfo>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void XrdCl::OpenInfo::OpenInfo(const uint8_t *, uint64_t, XrdCl::StatInfo *) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:868:7
    t.constructor<const uint8_t *, uint64_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("fileHandle"), jlcxx::arg("sessionId")    );
    t.constructor<const uint8_t *, uint64_t, XrdCl::StatInfo *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("fileHandle"), jlcxx::arg("sessionId"), jlcxx::arg("statInfo")    );

    DEBUG_MSG("Adding wrapper for void XrdCl::OpenInfo::GetFileHandle(uint8_t *) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::OpenInfo::GetFileHandle(uint8_t *)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:887:12
    t.method("GetFileHandle", [](XrdCl::OpenInfo const& a, uint8_t * arg0)->void { a.GetFileHandle(arg0); }, jlcxx::arg("this"), jlcxx::arg("fileHandle"));
    t.method("GetFileHandle", [](XrdCl::OpenInfo const* a, uint8_t * arg0)->void { a->GetFileHandle(arg0); }, jlcxx::arg("this"), jlcxx::arg("fileHandle"));

    DEBUG_MSG("Adding wrapper for const XrdCl::StatInfo * XrdCl::OpenInfo::GetStatInfo() (" __HERE__ ")");
    // signature to use in the veto list: const XrdCl::StatInfo * XrdCl::OpenInfo::GetStatInfo()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:895:23
    t.method("GetStatInfo", [](XrdCl::OpenInfo const& a)->const XrdCl::StatInfo * { return a.GetStatInfo(); }, jlcxx::arg("this"));
    t.method("GetStatInfo", [](XrdCl::OpenInfo const* a)->const XrdCl::StatInfo * { return a->GetStatInfo(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for uint64_t XrdCl::OpenInfo::GetSessionId() (" __HERE__ ")");
    // signature to use in the veto list: uint64_t XrdCl::OpenInfo::GetSessionId()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:903:16
    t.method("GetSessionId", [](XrdCl::OpenInfo const& a)->uint64_t { return a.GetSessionId(); }, jlcxx::arg("this"));
    t.method("GetSessionId", [](XrdCl::OpenInfo const* a)->uint64_t { return a->GetSessionId(); }, jlcxx::arg("this"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::OpenInfo>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_OpenInfo(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_OpenInfo(module));
}
