// this file was auto-generated by wrapit 5168a24
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::File> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::File> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::File
// signature to use in the veto file: XrdCl::File
struct JlXrdCl_File: public Wrapper {

  JlXrdCl_File(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::File (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:45:9
    jlcxx::TypeWrapper<XrdCl::File>  t = jlModule.add_type<XrdCl::File>("XrdCl!File");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::File>>(new jlcxx::TypeWrapper<XrdCl::File>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void XrdCl::File::File(bool) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:58:7
    t.constructor<bool>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void XrdCl::File::File(XrdCl::File::VirtRedirect, bool) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:63:7
    t.constructor<XrdCl::File::VirtRedirect>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<XrdCl::File::VirtRedirect, bool>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Open(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::Access::Mode, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Open(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::Access::Mode, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:81:20
    t.method("Open", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::Access::Mode, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::File::Open));
    t.method("Open", [](XrdCl::File& a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::Access::Mode arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a.Open(arg0, arg1, arg2, arg3); });
    t.method("Open", [](XrdCl::File* a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::Access::Mode arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a->Open(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Open(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::Access::Mode, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Open(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::Access::Mode, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:98:20
    t.method("Open", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::Access::Mode, uint16_t) >(&XrdCl::File::Open));
    t.method("Open", [](XrdCl::File& a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1)->XrdCl::XRootDStatus { return a.Open(arg0, arg1); });
    t.method("Open", [](XrdCl::File& a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::Access::Mode arg2)->XrdCl::XRootDStatus { return a.Open(arg0, arg1, arg2); });
    t.method("Open", [](XrdCl::File* a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1)->XrdCl::XRootDStatus { return a->Open(arg0, arg1); });
    t.method("Open", [](XrdCl::File* a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::Access::Mode arg2)->XrdCl::XRootDStatus { return a->Open(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Close(XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Close(XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:112:20
    t.method("Close", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::File::Close));
    t.method("Close", [](XrdCl::File& a, XrdCl::ResponseHandler * arg0)->XrdCl::XRootDStatus { return a.Close(arg0); });
    t.method("Close", [](XrdCl::File* a, XrdCl::ResponseHandler * arg0)->XrdCl::XRootDStatus { return a->Close(arg0); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Close(uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Close(uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:123:20
    t.method("Close", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint16_t) >(&XrdCl::File::Close));
    t.method("Close", [](XrdCl::File& a)->XrdCl::XRootDStatus { return a.Close(); });
    t.method("Close", [](XrdCl::File* a)->XrdCl::XRootDStatus { return a->Close(); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Stat(bool, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Stat(bool, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:136:20
    t.method("Stat", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(bool, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::File::Stat));
    t.method("Stat", [](XrdCl::File& a, bool arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a.Stat(arg0, arg1); });
    t.method("Stat", [](XrdCl::File* a, bool arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a->Stat(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Stat(bool, XrdCl::StatInfo *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Stat(bool, XrdCl::StatInfo *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:150:20
    t.method("Stat", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(bool, XrdCl::StatInfo *&, uint16_t) >(&XrdCl::File::Stat));
    t.method("Stat", [](XrdCl::File& a, bool arg0, XrdCl::StatInfo *& arg1)->XrdCl::XRootDStatus { return a.Stat(arg0, arg1); });
    t.method("Stat", [](XrdCl::File* a, bool arg0, XrdCl::StatInfo *& arg1)->XrdCl::XRootDStatus { return a->Stat(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Read(uint64_t, uint32_t, void *, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Read(uint64_t, uint32_t, void *, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:170:20
    t.method("Read", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint64_t, uint32_t, void *, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::File::Read));
    t.method("Read", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, void * arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a.Read(arg0, arg1, arg2, arg3); });
    t.method("Read", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, void * arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a->Read(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Read(uint64_t, uint32_t, void *, uint32_t &, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Read(uint64_t, uint32_t, void *, uint32_t &, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:188:20
    t.method("Read", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint64_t, uint32_t, void *, uint32_t &, uint16_t) >(&XrdCl::File::Read));
    t.method("Read", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, void * arg2, uint32_t & arg3)->XrdCl::XRootDStatus { return a.Read(arg0, arg1, arg2, arg3); });
    t.method("Read", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, void * arg2, uint32_t & arg3)->XrdCl::XRootDStatus { return a->Read(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::PgRead(uint64_t, uint32_t, void *, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::PgRead(uint64_t, uint32_t, void *, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:208:20
    t.method("PgRead", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint64_t, uint32_t, void *, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::File::PgRead));
    t.method("PgRead", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, void * arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a.PgRead(arg0, arg1, arg2, arg3); });
    t.method("PgRead", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, void * arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a->PgRead(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::PgRead(uint64_t, uint32_t, void *, std::vector<uint32_t> &, uint32_t &, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::PgRead(uint64_t, uint32_t, void *, std::vector<uint32_t> &, uint32_t &, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:227:20
    t.method("PgRead", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint64_t, uint32_t, void *, std::vector<uint32_t> &, uint32_t &, uint16_t) >(&XrdCl::File::PgRead));
    t.method("PgRead", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, void * arg2, std::vector<uint32_t> & arg3, uint32_t & arg4)->XrdCl::XRootDStatus { return a.PgRead(arg0, arg1, arg2, arg3, arg4); });
    t.method("PgRead", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, void * arg2, std::vector<uint32_t> & arg3, uint32_t & arg4)->XrdCl::XRootDStatus { return a->PgRead(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Write(uint64_t, uint32_t, const void *, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Write(uint64_t, uint32_t, const void *, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:249:20
    t.method("Write", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint64_t, uint32_t, const void *, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::File::Write));
    t.method("Write", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, const void * arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a.Write(arg0, arg1, arg2, arg3); });
    t.method("Write", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, const void * arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a->Write(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Write(uint64_t, uint32_t, const void *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Write(uint64_t, uint32_t, const void *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:270:20
    t.method("Write", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint64_t, uint32_t, const void *, uint16_t) >(&XrdCl::File::Write));
    t.method("Write", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, const void * arg2)->XrdCl::XRootDStatus { return a.Write(arg0, arg1, arg2); });
    t.method("Write", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, const void * arg2)->XrdCl::XRootDStatus { return a->Write(arg0, arg1, arg2); });



    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::PgWrite(uint64_t, uint32_t, const void *, std::vector<uint32_t> &, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::PgWrite(uint64_t, uint32_t, const void *, std::vector<uint32_t> &, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:358:20
    t.method("PgWrite", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint64_t, uint32_t, const void *, std::vector<uint32_t> &, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::File::PgWrite));
    t.method("PgWrite", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, const void * arg2, std::vector<uint32_t> & arg3, XrdCl::ResponseHandler * arg4)->XrdCl::XRootDStatus { return a.PgWrite(arg0, arg1, arg2, arg3, arg4); });
    t.method("PgWrite", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, const void * arg2, std::vector<uint32_t> & arg3, XrdCl::ResponseHandler * arg4)->XrdCl::XRootDStatus { return a->PgWrite(arg0, arg1, arg2, arg3, arg4); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::PgWrite(uint64_t, uint32_t, const void *, std::vector<uint32_t> &, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::PgWrite(uint64_t, uint32_t, const void *, std::vector<uint32_t> &, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:377:20
    t.method("PgWrite", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint64_t, uint32_t, const void *, std::vector<uint32_t> &, uint16_t) >(&XrdCl::File::PgWrite));
    t.method("PgWrite", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, const void * arg2, std::vector<uint32_t> & arg3)->XrdCl::XRootDStatus { return a.PgWrite(arg0, arg1, arg2, arg3); });
    t.method("PgWrite", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, const void * arg2, std::vector<uint32_t> & arg3)->XrdCl::XRootDStatus { return a->PgWrite(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Sync(XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Sync(XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:392:20
    t.method("Sync", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::File::Sync));
    t.method("Sync", [](XrdCl::File& a, XrdCl::ResponseHandler * arg0)->XrdCl::XRootDStatus { return a.Sync(arg0); });
    t.method("Sync", [](XrdCl::File* a, XrdCl::ResponseHandler * arg0)->XrdCl::XRootDStatus { return a->Sync(arg0); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Sync(uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Sync(uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:404:20
    t.method("Sync", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint16_t) >(&XrdCl::File::Sync));
    t.method("Sync", [](XrdCl::File& a)->XrdCl::XRootDStatus { return a.Sync(); });
    t.method("Sync", [](XrdCl::File* a)->XrdCl::XRootDStatus { return a->Sync(); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Truncate(uint64_t, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Truncate(uint64_t, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:415:20
    t.method("Truncate", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint64_t, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::File::Truncate));
    t.method("Truncate", [](XrdCl::File& a, uint64_t arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a.Truncate(arg0, arg1); });
    t.method("Truncate", [](XrdCl::File* a, uint64_t arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a->Truncate(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Truncate(uint64_t, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Truncate(uint64_t, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:429:20
    t.method("Truncate", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint64_t, uint16_t) >(&XrdCl::File::Truncate));
    t.method("Truncate", [](XrdCl::File& a, uint64_t arg0)->XrdCl::XRootDStatus { return a.Truncate(arg0); });
    t.method("Truncate", [](XrdCl::File* a, uint64_t arg0)->XrdCl::XRootDStatus { return a->Truncate(arg0); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::VectorRead(const XrdCl::ChunkList &, void *, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::VectorRead(const XrdCl::ChunkList &, void *, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:450:20
    t.method("VectorRead", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(const XrdCl::ChunkList &, void *, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::File::VectorRead));
    t.method("VectorRead", [](XrdCl::File& a, const XrdCl::ChunkList & arg0, void * arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a.VectorRead(arg0, arg1, arg2); });
    t.method("VectorRead", [](XrdCl::File* a, const XrdCl::ChunkList & arg0, void * arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a->VectorRead(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::VectorRead(const XrdCl::ChunkList &, void *, XrdCl::VectorReadInfo *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::VectorRead(const XrdCl::ChunkList &, void *, XrdCl::VectorReadInfo *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:473:20
    t.method("VectorRead", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(const XrdCl::ChunkList &, void *, XrdCl::VectorReadInfo *&, uint16_t) >(&XrdCl::File::VectorRead));
    t.method("VectorRead", [](XrdCl::File& a, const XrdCl::ChunkList & arg0, void * arg1, XrdCl::VectorReadInfo *& arg2)->XrdCl::XRootDStatus { return a.VectorRead(arg0, arg1, arg2); });
    t.method("VectorRead", [](XrdCl::File* a, const XrdCl::ChunkList & arg0, void * arg1, XrdCl::VectorReadInfo *& arg2)->XrdCl::XRootDStatus { return a->VectorRead(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::VectorWrite(const XrdCl::ChunkList &, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::VectorWrite(const XrdCl::ChunkList &, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:488:20
    t.method("VectorWrite", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(const XrdCl::ChunkList &, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::File::VectorWrite));
    t.method("VectorWrite", [](XrdCl::File& a, const XrdCl::ChunkList & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a.VectorWrite(arg0, arg1); });
    t.method("VectorWrite", [](XrdCl::File* a, const XrdCl::ChunkList & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a->VectorWrite(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::VectorWrite(const XrdCl::ChunkList &, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::VectorWrite(const XrdCl::ChunkList &, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:501:20
    t.method("VectorWrite", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(const XrdCl::ChunkList &, uint16_t) >(&XrdCl::File::VectorWrite));
    t.method("VectorWrite", [](XrdCl::File& a, const XrdCl::ChunkList & arg0)->XrdCl::XRootDStatus { return a.VectorWrite(arg0); });
    t.method("VectorWrite", [](XrdCl::File* a, const XrdCl::ChunkList & arg0)->XrdCl::XRootDStatus { return a->VectorWrite(arg0); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::WriteV(uint64_t, const iovec *, int, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::WriteV(uint64_t, const iovec *, int, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:516:20
    t.method("WriteV", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint64_t, const iovec *, int, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::File::WriteV));
    t.method("WriteV", [](XrdCl::File& a, uint64_t arg0, const iovec * arg1, int arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a.WriteV(arg0, arg1, arg2, arg3); });
    t.method("WriteV", [](XrdCl::File* a, uint64_t arg0, const iovec * arg1, int arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a->WriteV(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::WriteV(uint64_t, const iovec *, int, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::WriteV(uint64_t, const iovec *, int, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:532:20
    t.method("WriteV", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint64_t, const iovec *, int, uint16_t) >(&XrdCl::File::WriteV));
    t.method("WriteV", [](XrdCl::File& a, uint64_t arg0, const iovec * arg1, int arg2)->XrdCl::XRootDStatus { return a.WriteV(arg0, arg1, arg2); });
    t.method("WriteV", [](XrdCl::File* a, uint64_t arg0, const iovec * arg1, int arg2)->XrdCl::XRootDStatus { return a->WriteV(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::ReadV(uint64_t, iovec *, int, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::ReadV(uint64_t, iovec *, int, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:548:20
    t.method("ReadV", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint64_t, iovec *, int, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::File::ReadV));
    t.method("ReadV", [](XrdCl::File& a, uint64_t arg0, iovec * arg1, int arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a.ReadV(arg0, arg1, arg2, arg3); });
    t.method("ReadV", [](XrdCl::File* a, uint64_t arg0, iovec * arg1, int arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a->ReadV(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::ReadV(uint64_t, iovec *, int, uint32_t &, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::ReadV(uint64_t, iovec *, int, uint32_t &, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:565:20
    t.method("ReadV", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint64_t, iovec *, int, uint32_t &, uint16_t) >(&XrdCl::File::ReadV));
    t.method("ReadV", [](XrdCl::File& a, uint64_t arg0, iovec * arg1, int arg2, uint32_t & arg3)->XrdCl::XRootDStatus { return a.ReadV(arg0, arg1, arg2, arg3); });
    t.method("ReadV", [](XrdCl::File* a, uint64_t arg0, iovec * arg1, int arg2, uint32_t & arg3)->XrdCl::XRootDStatus { return a->ReadV(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Fcntl(const XrdCl::Buffer &, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Fcntl(const XrdCl::Buffer &, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:583:20
    t.method("Fcntl", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(const XrdCl::Buffer &, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::File::Fcntl));
    t.method("Fcntl", [](XrdCl::File& a, const XrdCl::Buffer & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a.Fcntl(arg0, arg1); });
    t.method("Fcntl", [](XrdCl::File* a, const XrdCl::Buffer & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a->Fcntl(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Fcntl(const XrdCl::Buffer &, XrdCl::Buffer *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Fcntl(const XrdCl::Buffer &, XrdCl::Buffer *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:598:20
    t.method("Fcntl", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(const XrdCl::Buffer &, XrdCl::Buffer *&, uint16_t) >(&XrdCl::File::Fcntl));
    t.method("Fcntl", [](XrdCl::File& a, const XrdCl::Buffer & arg0, XrdCl::Buffer *& arg1)->XrdCl::XRootDStatus { return a.Fcntl(arg0, arg1); });
    t.method("Fcntl", [](XrdCl::File* a, const XrdCl::Buffer & arg0, XrdCl::Buffer *& arg1)->XrdCl::XRootDStatus { return a->Fcntl(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Visa(XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Visa(XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:613:20
    t.method("Visa", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::File::Visa));
    t.method("Visa", [](XrdCl::File& a, XrdCl::ResponseHandler * arg0)->XrdCl::XRootDStatus { return a.Visa(arg0); });
    t.method("Visa", [](XrdCl::File* a, XrdCl::ResponseHandler * arg0)->XrdCl::XRootDStatus { return a->Visa(arg0); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Visa(XrdCl::Buffer *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Visa(XrdCl::Buffer *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:625:20
    t.method("Visa", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(XrdCl::Buffer *&, uint16_t) >(&XrdCl::File::Visa));
    t.method("Visa", [](XrdCl::File& a, XrdCl::Buffer *& arg0)->XrdCl::XRootDStatus { return a.Visa(arg0); });
    t.method("Visa", [](XrdCl::File* a, XrdCl::Buffer *& arg0)->XrdCl::XRootDStatus { return a->Visa(arg0); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::TryOtherServer(uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::TryOtherServer(uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:753:20
    t.method("TryOtherServer", static_cast<XrdCl::XRootDStatus (XrdCl::File::*)(uint16_t) >(&XrdCl::File::TryOtherServer));
    t.method("TryOtherServer", [](XrdCl::File& a)->XrdCl::XRootDStatus { return a.TryOtherServer(); });
    t.method("TryOtherServer", [](XrdCl::File* a)->XrdCl::XRootDStatus { return a->TryOtherServer(); });

    DEBUG_MSG("Adding wrapper for bool XrdCl::File::IsOpen() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::File::IsOpen()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:758:12
    t.method("IsOpen", static_cast<bool (XrdCl::File::*)()  const>(&XrdCl::File::IsOpen));

    DEBUG_MSG("Adding wrapper for bool XrdCl::File::IsSecure() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::File::IsSecure()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:763:12
    t.method("IsSecure", static_cast<bool (XrdCl::File::*)()  const>(&XrdCl::File::IsSecure));

    DEBUG_MSG("Adding wrapper for bool XrdCl::File::SetProperty(const std::string &, const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::File::SetProperty(const std::string &, const std::string &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:774:12
    t.method("SetProperty", static_cast<bool (XrdCl::File::*)(const std::string &, const std::string &) >(&XrdCl::File::SetProperty));

    DEBUG_MSG("Adding wrapper for bool XrdCl::File::GetProperty(const std::string &, std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::File::GetProperty(const std::string &, std::string &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFile.hh:785:12
    t.method("GetProperty", static_cast<bool (XrdCl::File::*)(const std::string &, std::string &)  const>(&XrdCl::File::GetProperty));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::File>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_File(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_File(module));
}
