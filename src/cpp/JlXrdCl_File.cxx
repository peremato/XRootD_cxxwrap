// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::File> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::File> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::File
// signature to use in the veto file: XrdCl::File
struct JlXrdCl_File: public Wrapper {

  JlXrdCl_File(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::File (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:45:9
    jlcxx::TypeWrapper<XrdCl::File>  t = jlModule.add_type<XrdCl::File>("XrdCl!File");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::File>>(new jlcxx::TypeWrapper<XrdCl::File>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );


    DEBUG_MSG("Adding wrapper for void XrdCl::File::File(bool) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:58:7
    t.constructor<bool>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("enablePlugIns")    );


    DEBUG_MSG("Adding wrapper for void XrdCl::File::File(XrdCl::File::VirtRedirect, bool) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:63:7
    t.constructor<XrdCl::File::VirtRedirect>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("virtRedirect")    );
    t.constructor<XrdCl::File::VirtRedirect, bool>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("virtRedirect"), jlcxx::arg("enablePlugIns")    );

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Open(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::Access::Mode, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Open(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::Access::Mode, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:81:20
    t.method("Open", [](XrdCl::File& a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::Access::Mode arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a.Open(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("url"), jlcxx::arg("flags"), jlcxx::arg("mode"), jlcxx::arg("handler"));
    t.method("Open", [](XrdCl::File& a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::Access::Mode arg2, XrdCl::ResponseHandler * arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a.Open(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("url"), jlcxx::arg("flags"), jlcxx::arg("mode"), jlcxx::arg("handler"), jlcxx::arg("timeout"));
    t.method("Open", [](XrdCl::File* a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::Access::Mode arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a->Open(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("url"), jlcxx::arg("flags"), jlcxx::arg("mode"), jlcxx::arg("handler"));
    t.method("Open", [](XrdCl::File* a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::Access::Mode arg2, XrdCl::ResponseHandler * arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a->Open(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("url"), jlcxx::arg("flags"), jlcxx::arg("mode"), jlcxx::arg("handler"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Open(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::Access::Mode, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Open(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::Access::Mode, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:98:20
    t.method("Open", [](XrdCl::File& a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1)->XrdCl::XRootDStatus { return a.Open(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("url"), jlcxx::arg("flags"));
    t.method("Open", [](XrdCl::File& a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::Access::Mode arg2)->XrdCl::XRootDStatus { return a.Open(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("url"), jlcxx::arg("flags"), jlcxx::arg("mode"));
    t.method("Open", [](XrdCl::File& a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::Access::Mode arg2, uint16_t arg3)->XrdCl::XRootDStatus { return a.Open(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("url"), jlcxx::arg("flags"), jlcxx::arg("mode"), jlcxx::arg("timeout"));
    t.method("Open", [](XrdCl::File* a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1)->XrdCl::XRootDStatus { return a->Open(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("url"), jlcxx::arg("flags"));
    t.method("Open", [](XrdCl::File* a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::Access::Mode arg2)->XrdCl::XRootDStatus { return a->Open(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("url"), jlcxx::arg("flags"), jlcxx::arg("mode"));
    t.method("Open", [](XrdCl::File* a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::Access::Mode arg2, uint16_t arg3)->XrdCl::XRootDStatus { return a->Open(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("url"), jlcxx::arg("flags"), jlcxx::arg("mode"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Close(XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Close(XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:112:20
    t.method("Close", [](XrdCl::File& a, XrdCl::ResponseHandler * arg0)->XrdCl::XRootDStatus { return a.Close(arg0); }, jlcxx::arg("this"), jlcxx::arg("handler"));
    t.method("Close", [](XrdCl::File& a, XrdCl::ResponseHandler * arg0, uint16_t arg1)->XrdCl::XRootDStatus { return a.Close(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("handler"), jlcxx::arg("timeout"));
    t.method("Close", [](XrdCl::File* a, XrdCl::ResponseHandler * arg0)->XrdCl::XRootDStatus { return a->Close(arg0); }, jlcxx::arg("this"), jlcxx::arg("handler"));
    t.method("Close", [](XrdCl::File* a, XrdCl::ResponseHandler * arg0, uint16_t arg1)->XrdCl::XRootDStatus { return a->Close(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("handler"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Close(uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Close(uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:123:20
    t.method("Close", [](XrdCl::File& a)->XrdCl::XRootDStatus { return a.Close(); }, jlcxx::arg("this"));
    t.method("Close", [](XrdCl::File& a, uint16_t arg0)->XrdCl::XRootDStatus { return a.Close(arg0); }, jlcxx::arg("this"), jlcxx::arg("timeout"));
    t.method("Close", [](XrdCl::File* a)->XrdCl::XRootDStatus { return a->Close(); }, jlcxx::arg("this"));
    t.method("Close", [](XrdCl::File* a, uint16_t arg0)->XrdCl::XRootDStatus { return a->Close(arg0); }, jlcxx::arg("this"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Stat(bool, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Stat(bool, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:136:20
    t.method("Stat", [](XrdCl::File& a, bool arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a.Stat(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("force"), jlcxx::arg("handler"));
    t.method("Stat", [](XrdCl::File& a, bool arg0, XrdCl::ResponseHandler * arg1, uint16_t arg2)->XrdCl::XRootDStatus { return a.Stat(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("force"), jlcxx::arg("handler"), jlcxx::arg("timeout"));
    t.method("Stat", [](XrdCl::File* a, bool arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a->Stat(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("force"), jlcxx::arg("handler"));
    t.method("Stat", [](XrdCl::File* a, bool arg0, XrdCl::ResponseHandler * arg1, uint16_t arg2)->XrdCl::XRootDStatus { return a->Stat(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("force"), jlcxx::arg("handler"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Stat(bool, XrdCl::StatInfo *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Stat(bool, XrdCl::StatInfo *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:150:20
    t.method("Stat", [](XrdCl::File& a, bool arg0, XrdCl::StatInfo *& arg1)->XrdCl::XRootDStatus { return a.Stat(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("force"), jlcxx::arg("response"));
    t.method("Stat", [](XrdCl::File& a, bool arg0, XrdCl::StatInfo *& arg1, uint16_t arg2)->XrdCl::XRootDStatus { return a.Stat(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("force"), jlcxx::arg("response"), jlcxx::arg("timeout"));
    t.method("Stat", [](XrdCl::File* a, bool arg0, XrdCl::StatInfo *& arg1)->XrdCl::XRootDStatus { return a->Stat(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("force"), jlcxx::arg("response"));
    t.method("Stat", [](XrdCl::File* a, bool arg0, XrdCl::StatInfo *& arg1, uint16_t arg2)->XrdCl::XRootDStatus { return a->Stat(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("force"), jlcxx::arg("response"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Read(uint64_t, uint32_t, void *, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Read(uint64_t, uint32_t, void *, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:170:20
    t.method("Read", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, void * arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a.Read(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("handler"));
    t.method("Read", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, void * arg2, XrdCl::ResponseHandler * arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a.Read(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("handler"), jlcxx::arg("timeout"));
    t.method("Read", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, void * arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a->Read(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("handler"));
    t.method("Read", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, void * arg2, XrdCl::ResponseHandler * arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a->Read(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("handler"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Read(uint64_t, uint32_t, void *, uint32_t &, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Read(uint64_t, uint32_t, void *, uint32_t &, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:188:20
    t.method("Read", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, void * arg2, uint32_t & arg3)->XrdCl::XRootDStatus { return a.Read(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("bytesRead"));
    t.method("Read", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, void * arg2, uint32_t & arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a.Read(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("bytesRead"), jlcxx::arg("timeout"));
    t.method("Read", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, void * arg2, uint32_t & arg3)->XrdCl::XRootDStatus { return a->Read(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("bytesRead"));
    t.method("Read", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, void * arg2, uint32_t & arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a->Read(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("bytesRead"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::PgRead(uint64_t, uint32_t, void *, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::PgRead(uint64_t, uint32_t, void *, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:208:20
    t.method("PgRead", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, void * arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a.PgRead(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("handler"));
    t.method("PgRead", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, void * arg2, XrdCl::ResponseHandler * arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a.PgRead(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("handler"), jlcxx::arg("timeout"));
    t.method("PgRead", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, void * arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a->PgRead(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("handler"));
    t.method("PgRead", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, void * arg2, XrdCl::ResponseHandler * arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a->PgRead(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("handler"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::PgRead(uint64_t, uint32_t, void *, std::vector<uint32_t> &, uint32_t &, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::PgRead(uint64_t, uint32_t, void *, std::vector<uint32_t> &, uint32_t &, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:227:20
    t.method("PgRead", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, void * arg2, std::vector<uint32_t> & arg3, uint32_t & arg4)->XrdCl::XRootDStatus { return a.PgRead(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("cksums"), jlcxx::arg("bytesRead"));
    t.method("PgRead", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, void * arg2, std::vector<uint32_t> & arg3, uint32_t & arg4, uint16_t arg5)->XrdCl::XRootDStatus { return a.PgRead(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("cksums"), jlcxx::arg("bytesRead"), jlcxx::arg("timeout"));
    t.method("PgRead", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, void * arg2, std::vector<uint32_t> & arg3, uint32_t & arg4)->XrdCl::XRootDStatus { return a->PgRead(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("cksums"), jlcxx::arg("bytesRead"));
    t.method("PgRead", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, void * arg2, std::vector<uint32_t> & arg3, uint32_t & arg4, uint16_t arg5)->XrdCl::XRootDStatus { return a->PgRead(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("cksums"), jlcxx::arg("bytesRead"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Write(uint64_t, uint32_t, const void *, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Write(uint64_t, uint32_t, const void *, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:249:20
    t.method("Write", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, const void * arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a.Write(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("handler"));
    t.method("Write", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, const void * arg2, XrdCl::ResponseHandler * arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a.Write(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("handler"), jlcxx::arg("timeout"));
    t.method("Write", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, const void * arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a->Write(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("handler"));
    t.method("Write", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, const void * arg2, XrdCl::ResponseHandler * arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a->Write(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("handler"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Write(uint64_t, uint32_t, const void *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Write(uint64_t, uint32_t, const void *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:270:20
    t.method("Write", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, const void * arg2)->XrdCl::XRootDStatus { return a.Write(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"));
    t.method("Write", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, const void * arg2, uint16_t arg3)->XrdCl::XRootDStatus { return a.Write(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("timeout"));
    t.method("Write", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, const void * arg2)->XrdCl::XRootDStatus { return a->Write(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"));
    t.method("Write", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, const void * arg2, uint16_t arg3)->XrdCl::XRootDStatus { return a->Write(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("timeout"));



    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::PgWrite(uint64_t, uint32_t, const void *, std::vector<uint32_t> &, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::PgWrite(uint64_t, uint32_t, const void *, std::vector<uint32_t> &, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:358:20
    t.method("PgWrite", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, const void * arg2, std::vector<uint32_t> & arg3, XrdCl::ResponseHandler * arg4)->XrdCl::XRootDStatus { return a.PgWrite(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("cksums"), jlcxx::arg("handler"));
    t.method("PgWrite", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, const void * arg2, std::vector<uint32_t> & arg3, XrdCl::ResponseHandler * arg4, uint16_t arg5)->XrdCl::XRootDStatus { return a.PgWrite(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("cksums"), jlcxx::arg("handler"), jlcxx::arg("timeout"));
    t.method("PgWrite", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, const void * arg2, std::vector<uint32_t> & arg3, XrdCl::ResponseHandler * arg4)->XrdCl::XRootDStatus { return a->PgWrite(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("cksums"), jlcxx::arg("handler"));
    t.method("PgWrite", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, const void * arg2, std::vector<uint32_t> & arg3, XrdCl::ResponseHandler * arg4, uint16_t arg5)->XrdCl::XRootDStatus { return a->PgWrite(arg0, arg1, arg2, arg3, arg4, arg5); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("cksums"), jlcxx::arg("handler"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::PgWrite(uint64_t, uint32_t, const void *, std::vector<uint32_t> &, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::PgWrite(uint64_t, uint32_t, const void *, std::vector<uint32_t> &, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:377:20
    t.method("PgWrite", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, const void * arg2, std::vector<uint32_t> & arg3)->XrdCl::XRootDStatus { return a.PgWrite(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("cksums"));
    t.method("PgWrite", [](XrdCl::File& a, uint64_t arg0, uint32_t arg1, const void * arg2, std::vector<uint32_t> & arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a.PgWrite(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("cksums"), jlcxx::arg("timeout"));
    t.method("PgWrite", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, const void * arg2, std::vector<uint32_t> & arg3)->XrdCl::XRootDStatus { return a->PgWrite(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("cksums"));
    t.method("PgWrite", [](XrdCl::File* a, uint64_t arg0, uint32_t arg1, const void * arg2, std::vector<uint32_t> & arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a->PgWrite(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("size"), jlcxx::arg("buffer"), jlcxx::arg("cksums"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Sync(XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Sync(XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:392:20
    t.method("Sync", [](XrdCl::File& a, XrdCl::ResponseHandler * arg0)->XrdCl::XRootDStatus { return a.Sync(arg0); }, jlcxx::arg("this"), jlcxx::arg("handler"));
    t.method("Sync", [](XrdCl::File& a, XrdCl::ResponseHandler * arg0, uint16_t arg1)->XrdCl::XRootDStatus { return a.Sync(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("handler"), jlcxx::arg("timeout"));
    t.method("Sync", [](XrdCl::File* a, XrdCl::ResponseHandler * arg0)->XrdCl::XRootDStatus { return a->Sync(arg0); }, jlcxx::arg("this"), jlcxx::arg("handler"));
    t.method("Sync", [](XrdCl::File* a, XrdCl::ResponseHandler * arg0, uint16_t arg1)->XrdCl::XRootDStatus { return a->Sync(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("handler"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Sync(uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Sync(uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:404:20
    t.method("Sync", [](XrdCl::File& a)->XrdCl::XRootDStatus { return a.Sync(); }, jlcxx::arg("this"));
    t.method("Sync", [](XrdCl::File& a, uint16_t arg0)->XrdCl::XRootDStatus { return a.Sync(arg0); }, jlcxx::arg("this"), jlcxx::arg("timeout"));
    t.method("Sync", [](XrdCl::File* a)->XrdCl::XRootDStatus { return a->Sync(); }, jlcxx::arg("this"));
    t.method("Sync", [](XrdCl::File* a, uint16_t arg0)->XrdCl::XRootDStatus { return a->Sync(arg0); }, jlcxx::arg("this"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Truncate(uint64_t, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Truncate(uint64_t, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:415:20
    t.method("Truncate", [](XrdCl::File& a, uint64_t arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a.Truncate(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("size"), jlcxx::arg("handler"));
    t.method("Truncate", [](XrdCl::File& a, uint64_t arg0, XrdCl::ResponseHandler * arg1, uint16_t arg2)->XrdCl::XRootDStatus { return a.Truncate(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("size"), jlcxx::arg("handler"), jlcxx::arg("timeout"));
    t.method("Truncate", [](XrdCl::File* a, uint64_t arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a->Truncate(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("size"), jlcxx::arg("handler"));
    t.method("Truncate", [](XrdCl::File* a, uint64_t arg0, XrdCl::ResponseHandler * arg1, uint16_t arg2)->XrdCl::XRootDStatus { return a->Truncate(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("size"), jlcxx::arg("handler"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Truncate(uint64_t, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Truncate(uint64_t, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:429:20
    t.method("Truncate", [](XrdCl::File& a, uint64_t arg0)->XrdCl::XRootDStatus { return a.Truncate(arg0); }, jlcxx::arg("this"), jlcxx::arg("size"));
    t.method("Truncate", [](XrdCl::File& a, uint64_t arg0, uint16_t arg1)->XrdCl::XRootDStatus { return a.Truncate(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("size"), jlcxx::arg("timeout"));
    t.method("Truncate", [](XrdCl::File* a, uint64_t arg0)->XrdCl::XRootDStatus { return a->Truncate(arg0); }, jlcxx::arg("this"), jlcxx::arg("size"));
    t.method("Truncate", [](XrdCl::File* a, uint64_t arg0, uint16_t arg1)->XrdCl::XRootDStatus { return a->Truncate(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("size"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::VectorRead(const XrdCl::ChunkList &, void *, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::VectorRead(const XrdCl::ChunkList &, void *, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:450:20
    t.method("VectorRead", [](XrdCl::File& a, const XrdCl::ChunkList & arg0, void * arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a.VectorRead(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("chunks"), jlcxx::arg("buffer"), jlcxx::arg("handler"));
    t.method("VectorRead", [](XrdCl::File& a, const XrdCl::ChunkList & arg0, void * arg1, XrdCl::ResponseHandler * arg2, uint16_t arg3)->XrdCl::XRootDStatus { return a.VectorRead(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("chunks"), jlcxx::arg("buffer"), jlcxx::arg("handler"), jlcxx::arg("timeout"));
    t.method("VectorRead", [](XrdCl::File* a, const XrdCl::ChunkList & arg0, void * arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a->VectorRead(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("chunks"), jlcxx::arg("buffer"), jlcxx::arg("handler"));
    t.method("VectorRead", [](XrdCl::File* a, const XrdCl::ChunkList & arg0, void * arg1, XrdCl::ResponseHandler * arg2, uint16_t arg3)->XrdCl::XRootDStatus { return a->VectorRead(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("chunks"), jlcxx::arg("buffer"), jlcxx::arg("handler"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::VectorRead(const XrdCl::ChunkList &, void *, XrdCl::VectorReadInfo *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::VectorRead(const XrdCl::ChunkList &, void *, XrdCl::VectorReadInfo *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:473:20
    t.method("VectorRead", [](XrdCl::File& a, const XrdCl::ChunkList & arg0, void * arg1, XrdCl::VectorReadInfo *& arg2)->XrdCl::XRootDStatus { return a.VectorRead(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("chunks"), jlcxx::arg("buffer"), jlcxx::arg("vReadInfo"));
    t.method("VectorRead", [](XrdCl::File& a, const XrdCl::ChunkList & arg0, void * arg1, XrdCl::VectorReadInfo *& arg2, uint16_t arg3)->XrdCl::XRootDStatus { return a.VectorRead(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("chunks"), jlcxx::arg("buffer"), jlcxx::arg("vReadInfo"), jlcxx::arg("timeout"));
    t.method("VectorRead", [](XrdCl::File* a, const XrdCl::ChunkList & arg0, void * arg1, XrdCl::VectorReadInfo *& arg2)->XrdCl::XRootDStatus { return a->VectorRead(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("chunks"), jlcxx::arg("buffer"), jlcxx::arg("vReadInfo"));
    t.method("VectorRead", [](XrdCl::File* a, const XrdCl::ChunkList & arg0, void * arg1, XrdCl::VectorReadInfo *& arg2, uint16_t arg3)->XrdCl::XRootDStatus { return a->VectorRead(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("chunks"), jlcxx::arg("buffer"), jlcxx::arg("vReadInfo"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::VectorWrite(const XrdCl::ChunkList &, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::VectorWrite(const XrdCl::ChunkList &, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:488:20
    t.method("VectorWrite", [](XrdCl::File& a, const XrdCl::ChunkList & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a.VectorWrite(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("chunks"), jlcxx::arg("handler"));
    t.method("VectorWrite", [](XrdCl::File& a, const XrdCl::ChunkList & arg0, XrdCl::ResponseHandler * arg1, uint16_t arg2)->XrdCl::XRootDStatus { return a.VectorWrite(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("chunks"), jlcxx::arg("handler"), jlcxx::arg("timeout"));
    t.method("VectorWrite", [](XrdCl::File* a, const XrdCl::ChunkList & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a->VectorWrite(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("chunks"), jlcxx::arg("handler"));
    t.method("VectorWrite", [](XrdCl::File* a, const XrdCl::ChunkList & arg0, XrdCl::ResponseHandler * arg1, uint16_t arg2)->XrdCl::XRootDStatus { return a->VectorWrite(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("chunks"), jlcxx::arg("handler"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::VectorWrite(const XrdCl::ChunkList &, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::VectorWrite(const XrdCl::ChunkList &, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:501:20
    t.method("VectorWrite", [](XrdCl::File& a, const XrdCl::ChunkList & arg0)->XrdCl::XRootDStatus { return a.VectorWrite(arg0); }, jlcxx::arg("this"), jlcxx::arg("chunks"));
    t.method("VectorWrite", [](XrdCl::File& a, const XrdCl::ChunkList & arg0, uint16_t arg1)->XrdCl::XRootDStatus { return a.VectorWrite(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("chunks"), jlcxx::arg("timeout"));
    t.method("VectorWrite", [](XrdCl::File* a, const XrdCl::ChunkList & arg0)->XrdCl::XRootDStatus { return a->VectorWrite(arg0); }, jlcxx::arg("this"), jlcxx::arg("chunks"));
    t.method("VectorWrite", [](XrdCl::File* a, const XrdCl::ChunkList & arg0, uint16_t arg1)->XrdCl::XRootDStatus { return a->VectorWrite(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("chunks"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::WriteV(uint64_t, const iovec *, int, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::WriteV(uint64_t, const iovec *, int, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:516:20
    t.method("WriteV", [](XrdCl::File& a, uint64_t arg0, const iovec * arg1, int arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a.WriteV(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("iov"), jlcxx::arg("iovcnt"), jlcxx::arg("handler"));
    t.method("WriteV", [](XrdCl::File& a, uint64_t arg0, const iovec * arg1, int arg2, XrdCl::ResponseHandler * arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a.WriteV(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("iov"), jlcxx::arg("iovcnt"), jlcxx::arg("handler"), jlcxx::arg("timeout"));
    t.method("WriteV", [](XrdCl::File* a, uint64_t arg0, const iovec * arg1, int arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a->WriteV(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("iov"), jlcxx::arg("iovcnt"), jlcxx::arg("handler"));
    t.method("WriteV", [](XrdCl::File* a, uint64_t arg0, const iovec * arg1, int arg2, XrdCl::ResponseHandler * arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a->WriteV(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("iov"), jlcxx::arg("iovcnt"), jlcxx::arg("handler"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::WriteV(uint64_t, const iovec *, int, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::WriteV(uint64_t, const iovec *, int, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:532:20
    t.method("WriteV", [](XrdCl::File& a, uint64_t arg0, const iovec * arg1, int arg2)->XrdCl::XRootDStatus { return a.WriteV(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("iov"), jlcxx::arg("iovcnt"));
    t.method("WriteV", [](XrdCl::File& a, uint64_t arg0, const iovec * arg1, int arg2, uint16_t arg3)->XrdCl::XRootDStatus { return a.WriteV(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("iov"), jlcxx::arg("iovcnt"), jlcxx::arg("timeout"));
    t.method("WriteV", [](XrdCl::File* a, uint64_t arg0, const iovec * arg1, int arg2)->XrdCl::XRootDStatus { return a->WriteV(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("iov"), jlcxx::arg("iovcnt"));
    t.method("WriteV", [](XrdCl::File* a, uint64_t arg0, const iovec * arg1, int arg2, uint16_t arg3)->XrdCl::XRootDStatus { return a->WriteV(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("iov"), jlcxx::arg("iovcnt"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::ReadV(uint64_t, iovec *, int, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::ReadV(uint64_t, iovec *, int, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:548:20
    t.method("ReadV", [](XrdCl::File& a, uint64_t arg0, iovec * arg1, int arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a.ReadV(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("iov"), jlcxx::arg("iovcnt"), jlcxx::arg("handler"));
    t.method("ReadV", [](XrdCl::File& a, uint64_t arg0, iovec * arg1, int arg2, XrdCl::ResponseHandler * arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a.ReadV(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("iov"), jlcxx::arg("iovcnt"), jlcxx::arg("handler"), jlcxx::arg("timeout"));
    t.method("ReadV", [](XrdCl::File* a, uint64_t arg0, iovec * arg1, int arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a->ReadV(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("iov"), jlcxx::arg("iovcnt"), jlcxx::arg("handler"));
    t.method("ReadV", [](XrdCl::File* a, uint64_t arg0, iovec * arg1, int arg2, XrdCl::ResponseHandler * arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a->ReadV(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("iov"), jlcxx::arg("iovcnt"), jlcxx::arg("handler"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::ReadV(uint64_t, iovec *, int, uint32_t &, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::ReadV(uint64_t, iovec *, int, uint32_t &, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:565:20
    t.method("ReadV", [](XrdCl::File& a, uint64_t arg0, iovec * arg1, int arg2, uint32_t & arg3)->XrdCl::XRootDStatus { return a.ReadV(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("iov"), jlcxx::arg("iovcnt"), jlcxx::arg("bytesRead"));
    t.method("ReadV", [](XrdCl::File& a, uint64_t arg0, iovec * arg1, int arg2, uint32_t & arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a.ReadV(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("iov"), jlcxx::arg("iovcnt"), jlcxx::arg("bytesRead"), jlcxx::arg("timeout"));
    t.method("ReadV", [](XrdCl::File* a, uint64_t arg0, iovec * arg1, int arg2, uint32_t & arg3)->XrdCl::XRootDStatus { return a->ReadV(arg0, arg1, arg2, arg3); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("iov"), jlcxx::arg("iovcnt"), jlcxx::arg("bytesRead"));
    t.method("ReadV", [](XrdCl::File* a, uint64_t arg0, iovec * arg1, int arg2, uint32_t & arg3, uint16_t arg4)->XrdCl::XRootDStatus { return a->ReadV(arg0, arg1, arg2, arg3, arg4); }, jlcxx::arg("this"), jlcxx::arg("offset"), jlcxx::arg("iov"), jlcxx::arg("iovcnt"), jlcxx::arg("bytesRead"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Fcntl(const XrdCl::Buffer &, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Fcntl(const XrdCl::Buffer &, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:583:20
    t.method("Fcntl", [](XrdCl::File& a, const XrdCl::Buffer & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a.Fcntl(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("arg"), jlcxx::arg("handler"));
    t.method("Fcntl", [](XrdCl::File& a, const XrdCl::Buffer & arg0, XrdCl::ResponseHandler * arg1, uint16_t arg2)->XrdCl::XRootDStatus { return a.Fcntl(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("arg"), jlcxx::arg("handler"), jlcxx::arg("timeout"));
    t.method("Fcntl", [](XrdCl::File* a, const XrdCl::Buffer & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a->Fcntl(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("arg"), jlcxx::arg("handler"));
    t.method("Fcntl", [](XrdCl::File* a, const XrdCl::Buffer & arg0, XrdCl::ResponseHandler * arg1, uint16_t arg2)->XrdCl::XRootDStatus { return a->Fcntl(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("arg"), jlcxx::arg("handler"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Fcntl(const XrdCl::Buffer &, XrdCl::Buffer *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Fcntl(const XrdCl::Buffer &, XrdCl::Buffer *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:598:20
    t.method("Fcntl", [](XrdCl::File& a, const XrdCl::Buffer & arg0, XrdCl::Buffer *& arg1)->XrdCl::XRootDStatus { return a.Fcntl(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("arg"), jlcxx::arg("response"));
    t.method("Fcntl", [](XrdCl::File& a, const XrdCl::Buffer & arg0, XrdCl::Buffer *& arg1, uint16_t arg2)->XrdCl::XRootDStatus { return a.Fcntl(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("arg"), jlcxx::arg("response"), jlcxx::arg("timeout"));
    t.method("Fcntl", [](XrdCl::File* a, const XrdCl::Buffer & arg0, XrdCl::Buffer *& arg1)->XrdCl::XRootDStatus { return a->Fcntl(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("arg"), jlcxx::arg("response"));
    t.method("Fcntl", [](XrdCl::File* a, const XrdCl::Buffer & arg0, XrdCl::Buffer *& arg1, uint16_t arg2)->XrdCl::XRootDStatus { return a->Fcntl(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("arg"), jlcxx::arg("response"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Visa(XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Visa(XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:613:20
    t.method("Visa", [](XrdCl::File& a, XrdCl::ResponseHandler * arg0)->XrdCl::XRootDStatus { return a.Visa(arg0); }, jlcxx::arg("this"), jlcxx::arg("handler"));
    t.method("Visa", [](XrdCl::File& a, XrdCl::ResponseHandler * arg0, uint16_t arg1)->XrdCl::XRootDStatus { return a.Visa(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("handler"), jlcxx::arg("timeout"));
    t.method("Visa", [](XrdCl::File* a, XrdCl::ResponseHandler * arg0)->XrdCl::XRootDStatus { return a->Visa(arg0); }, jlcxx::arg("this"), jlcxx::arg("handler"));
    t.method("Visa", [](XrdCl::File* a, XrdCl::ResponseHandler * arg0, uint16_t arg1)->XrdCl::XRootDStatus { return a->Visa(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("handler"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::Visa(XrdCl::Buffer *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::Visa(XrdCl::Buffer *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:625:20
    t.method("Visa", [](XrdCl::File& a, XrdCl::Buffer *& arg0)->XrdCl::XRootDStatus { return a.Visa(arg0); }, jlcxx::arg("this"), jlcxx::arg("visa"));
    t.method("Visa", [](XrdCl::File& a, XrdCl::Buffer *& arg0, uint16_t arg1)->XrdCl::XRootDStatus { return a.Visa(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("visa"), jlcxx::arg("timeout"));
    t.method("Visa", [](XrdCl::File* a, XrdCl::Buffer *& arg0)->XrdCl::XRootDStatus { return a->Visa(arg0); }, jlcxx::arg("this"), jlcxx::arg("visa"));
    t.method("Visa", [](XrdCl::File* a, XrdCl::Buffer *& arg0, uint16_t arg1)->XrdCl::XRootDStatus { return a->Visa(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("visa"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::File::TryOtherServer(uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::File::TryOtherServer(uint16_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:753:20
    t.method("TryOtherServer", [](XrdCl::File& a)->XrdCl::XRootDStatus { return a.TryOtherServer(); }, jlcxx::arg("this"));
    t.method("TryOtherServer", [](XrdCl::File& a, uint16_t arg0)->XrdCl::XRootDStatus { return a.TryOtherServer(arg0); }, jlcxx::arg("this"), jlcxx::arg("timeout"));
    t.method("TryOtherServer", [](XrdCl::File* a)->XrdCl::XRootDStatus { return a->TryOtherServer(); }, jlcxx::arg("this"));
    t.method("TryOtherServer", [](XrdCl::File* a, uint16_t arg0)->XrdCl::XRootDStatus { return a->TryOtherServer(arg0); }, jlcxx::arg("this"), jlcxx::arg("timeout"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::File::IsOpen() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::File::IsOpen()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:758:12
    t.method("IsOpen", [](XrdCl::File const& a)->bool { return a.IsOpen(); }, jlcxx::arg("this"));
    t.method("IsOpen", [](XrdCl::File const* a)->bool { return a->IsOpen(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::File::IsSecure() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::File::IsSecure()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:763:12
    t.method("IsSecure", [](XrdCl::File const& a)->bool { return a.IsSecure(); }, jlcxx::arg("this"));
    t.method("IsSecure", [](XrdCl::File const* a)->bool { return a->IsSecure(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::File::SetProperty(const std::string &, const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::File::SetProperty(const std::string &, const std::string &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:774:12
    t.method("SetProperty", [](XrdCl::File& a, const std::string & arg0, const std::string & arg1)->bool { return a.SetProperty(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("value"));
    t.method("SetProperty", [](XrdCl::File* a, const std::string & arg0, const std::string & arg1)->bool { return a->SetProperty(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("value"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::File::GetProperty(const std::string &, std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::File::GetProperty(const std::string &, std::string &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClFile.hh:785:12
    t.method("GetProperty", [](XrdCl::File const& a, const std::string & arg0, std::string & arg1)->bool { return a.GetProperty(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("value"));
    t.method("GetProperty", [](XrdCl::File const* a, const std::string & arg0, std::string & arg1)->bool { return a->GetProperty(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("value"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::File>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_File(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_File(module));
}
