// this file was auto-generated by wrapit 5168a24
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::HostInfo> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::HostInfo> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::HostInfo
// signature to use in the veto file: XrdCl::HostInfo
struct JlXrdCl_HostInfo: public Wrapper {

  JlXrdCl_HostInfo(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::HostInfo (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1108:10
    jlcxx::TypeWrapper<XrdCl::HostInfo>  t = jlModule.add_type<XrdCl::HostInfo>("XrdCl!HostInfo");
    jlcxx::stl::apply_stl<XrdCl::HostInfo>(jlModule);
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::HostInfo>>(new jlcxx::TypeWrapper<XrdCl::HostInfo>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);


    DEBUG_MSG("Adding wrapper for void XrdCl::HostInfo::HostInfo(const XrdCl::URL &, bool) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1112:5
    t.constructor<const XrdCl::URL &>(/*finalize=*/jlcxx::finalize_policy::yes);
    t.constructor<const XrdCl::URL &, bool>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding flags methods  to provide read access to the field flags (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1114:14
    // signature to use in the veto list: XrdCl::HostInfo::flags
    t.method("flags", [](const XrdCl::HostInfo& a) -> uint32_t { return a.flags; });
    t.method("flags", [](XrdCl::HostInfo& a) -> uint32_t { return a.flags; });
    t.method("flags", [](const XrdCl::HostInfo* a) -> uint32_t { return a->flags; });
    t.method("flags", [](XrdCl::HostInfo* a) -> uint32_t { return a->flags; });
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1114:14
    // signature to use in the veto list: XrdCl::HostInfo::flags
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding flags! methods to provide write access to the field flags (" __HERE__ ")");
    t.method("flags!", [](XrdCl::HostInfo& a, uint32_t val) -> uint32_t { return a.flags = val; });

    DEBUG_MSG("Adding flags! methods to provide write access to the field flags (" __HERE__ ")");
    t.method("flags!", [](XrdCl::HostInfo* a, uint32_t val) -> uint32_t { return a->flags = val; });

    DEBUG_MSG("Adding protocol methods  to provide read access to the field protocol (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1115:14
    // signature to use in the veto list: XrdCl::HostInfo::protocol
    t.method("protocol", [](const XrdCl::HostInfo& a) -> uint32_t { return a.protocol; });
    t.method("protocol", [](XrdCl::HostInfo& a) -> uint32_t { return a.protocol; });
    t.method("protocol", [](const XrdCl::HostInfo* a) -> uint32_t { return a->protocol; });
    t.method("protocol", [](XrdCl::HostInfo* a) -> uint32_t { return a->protocol; });
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1115:14
    // signature to use in the veto list: XrdCl::HostInfo::protocol
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding protocol! methods to provide write access to the field protocol (" __HERE__ ")");
    t.method("protocol!", [](XrdCl::HostInfo& a, uint32_t val) -> uint32_t { return a.protocol = val; });

    DEBUG_MSG("Adding protocol! methods to provide write access to the field protocol (" __HERE__ ")");
    t.method("protocol!", [](XrdCl::HostInfo* a, uint32_t val) -> uint32_t { return a->protocol = val; });

    DEBUG_MSG("Adding loadBalancer methods  to provide read access to the field loadBalancer (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1116:14
    // signature to use in the veto list: XrdCl::HostInfo::loadBalancer
    t.method("loadBalancer", [](const XrdCl::HostInfo& a) -> bool { return a.loadBalancer; });
    t.method("loadBalancer", [](XrdCl::HostInfo& a) -> bool { return a.loadBalancer; });
    t.method("loadBalancer", [](const XrdCl::HostInfo* a) -> bool { return a->loadBalancer; });
    t.method("loadBalancer", [](XrdCl::HostInfo* a) -> bool { return a->loadBalancer; });
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1116:14
    // signature to use in the veto list: XrdCl::HostInfo::loadBalancer
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding loadBalancer! methods to provide write access to the field loadBalancer (" __HERE__ ")");
    t.method("loadBalancer!", [](XrdCl::HostInfo& a, bool val) -> bool { return a.loadBalancer = val; });

    DEBUG_MSG("Adding loadBalancer! methods to provide write access to the field loadBalancer (" __HERE__ ")");
    t.method("loadBalancer!", [](XrdCl::HostInfo* a, bool val) -> bool { return a->loadBalancer = val; });

    DEBUG_MSG("Adding url methods  to provide read access to the field url (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1117:14
    // signature to use in the veto list: XrdCl::HostInfo::url
    t.method("url", [](const XrdCl::HostInfo& a) -> const XrdCl::URL& { return a.url; });
    t.method("url", [](XrdCl::HostInfo& a) -> XrdCl::URL& { return a.url; });
    t.method("url", [](const XrdCl::HostInfo* a) -> const XrdCl::URL& { return a->url; });
    t.method("url", [](XrdCl::HostInfo* a) -> XrdCl::URL& { return a->url; });
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1117:14
    // signature to use in the veto list: XrdCl::HostInfo::url
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding url! methods to provide write access to the field url (" __HERE__ ")");
    t.method("url!", [](XrdCl::HostInfo& a, const XrdCl::URL& val) -> XrdCl::URL& { return a.url = val; });

    DEBUG_MSG("Adding url! methods to provide write access to the field url (" __HERE__ ")");
    t.method("url!", [](XrdCl::HostInfo* a, const XrdCl::URL& val) -> XrdCl::URL& { return a->url = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::HostInfo>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_HostInfo(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_HostInfo(module));
}
