// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::DirectoryList> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::DirectoryList> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::DirectoryList
// signature to use in the veto file: XrdCl::DirectoryList
struct JlXrdCl_DirectoryList: public Wrapper {

  JlXrdCl_DirectoryList(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::DirectoryList (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:649:9
    jlcxx::TypeWrapper<XrdCl::DirectoryList>  t = jlModule.add_type<XrdCl::DirectoryList>("XrdCl!DirectoryList");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::DirectoryList>>(new jlcxx::TypeWrapper<XrdCl::DirectoryList>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for void XrdCl::DirectoryList::Add(XrdCl::DirectoryList::ListEntry *) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::DirectoryList::Add(XrdCl::DirectoryList::ListEntry *)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:761:12
    t.method("Add", static_cast<void (XrdCl::DirectoryList::*)(XrdCl::DirectoryList::ListEntry *) >(&XrdCl::DirectoryList::Add));

    DEBUG_MSG("Adding wrapper for XrdCl::DirectoryList::ListEntry * XrdCl::DirectoryList::At(uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::DirectoryList::ListEntry * XrdCl::DirectoryList::At(uint32_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:769:18
    t.method("At", static_cast<XrdCl::DirectoryList::ListEntry * (XrdCl::DirectoryList::*)(uint32_t) >(&XrdCl::DirectoryList::At));

    DEBUG_MSG("Adding wrapper for uint32_t XrdCl::DirectoryList::GetSize() (" __HERE__ ")");
    // signature to use in the veto list: uint32_t XrdCl::DirectoryList::GetSize()
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:809:16
    t.method("GetSize", static_cast<uint32_t (XrdCl::DirectoryList::*)()  const>(&XrdCl::DirectoryList::GetSize));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::DirectoryList::GetParentName() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::DirectoryList::GetParentName()
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:817:26
    t.method("GetParentName", static_cast<const std::string & (XrdCl::DirectoryList::*)()  const>(&XrdCl::DirectoryList::GetParentName));

    DEBUG_MSG("Adding wrapper for void XrdCl::DirectoryList::SetParentName(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::DirectoryList::SetParentName(const std::string &)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:825:12
    t.method("SetParentName", static_cast<void (XrdCl::DirectoryList::*)(const std::string &) >(&XrdCl::DirectoryList::SetParentName));

    DEBUG_MSG("Adding wrapper for bool XrdCl::DirectoryList::ParseServerResponse(const std::string &, const char *) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::DirectoryList::ParseServerResponse(const std::string &, const char *)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:836:12
    t.method("ParseServerResponse", static_cast<bool (XrdCl::DirectoryList::*)(const std::string &, const char *) >(&XrdCl::DirectoryList::ParseServerResponse));

    DEBUG_MSG("Adding wrapper for bool XrdCl::DirectoryList::ParseServerResponse(const std::string &, const char *, bool) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::DirectoryList::ParseServerResponse(const std::string &, const char *, bool)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:842:12
    t.method("ParseServerResponse", static_cast<bool (XrdCl::DirectoryList::*)(const std::string &, const char *, bool) >(&XrdCl::DirectoryList::ParseServerResponse));

    DEBUG_MSG("Adding wrapper for bool XrdCl::DirectoryList::HasStatInfo(const char *) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::DirectoryList::HasStatInfo(const char *)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:849:19
    module_.method("XrdCl!DirectoryList!HasStatInfo", static_cast<bool (*)(const char *) >(&XrdCl::DirectoryList::HasStatInfo));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::DirectoryList>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_DirectoryList(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_DirectoryList(module));
}
