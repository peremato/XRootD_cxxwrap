// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::DirectoryList> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::DirectoryList> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::DirectoryList
// signature to use in the veto file: XrdCl::DirectoryList
struct JlXrdCl_DirectoryList: public Wrapper {

  JlXrdCl_DirectoryList(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::DirectoryList (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:650:9
    jlcxx::TypeWrapper<XrdCl::DirectoryList>  t = jlModule.add_type<XrdCl::DirectoryList>("XrdCl!DirectoryList");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::DirectoryList>>(new jlcxx::TypeWrapper<XrdCl::DirectoryList>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );

    DEBUG_MSG("Adding wrapper for void XrdCl::DirectoryList::Add(XrdCl::DirectoryList::ListEntry *) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::DirectoryList::Add(XrdCl::DirectoryList::ListEntry *)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:762:12
    t.method("Add", [](XrdCl::DirectoryList& a, XrdCl::DirectoryList::ListEntry * arg0)->void { a.Add(arg0); }, jlcxx::arg("this"), jlcxx::arg("entry"));
    t.method("Add", [](XrdCl::DirectoryList* a, XrdCl::DirectoryList::ListEntry * arg0)->void { a->Add(arg0); }, jlcxx::arg("this"), jlcxx::arg("entry"));

    DEBUG_MSG("Adding wrapper for XrdCl::DirectoryList::ListEntry * XrdCl::DirectoryList::At(uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::DirectoryList::ListEntry * XrdCl::DirectoryList::At(uint32_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:770:18
    t.method("At", [](XrdCl::DirectoryList& a, uint32_t arg0)->XrdCl::DirectoryList::ListEntry * { return a.At(arg0); }, jlcxx::arg("this"), jlcxx::arg("index"));
    t.method("At", [](XrdCl::DirectoryList* a, uint32_t arg0)->XrdCl::DirectoryList::ListEntry * { return a->At(arg0); }, jlcxx::arg("this"), jlcxx::arg("index"));

    DEBUG_MSG("Adding wrapper for uint32_t XrdCl::DirectoryList::GetSize() (" __HERE__ ")");
    // signature to use in the veto list: uint32_t XrdCl::DirectoryList::GetSize()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:810:16
    t.method("GetSize", [](XrdCl::DirectoryList const& a)->uint32_t { return a.GetSize(); }, jlcxx::arg("this"));
    t.method("GetSize", [](XrdCl::DirectoryList const* a)->uint32_t { return a->GetSize(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::DirectoryList::GetParentName() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::DirectoryList::GetParentName()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:818:26
    t.method("GetParentName", [](XrdCl::DirectoryList const& a)->const std::string & { return a.GetParentName(); }, jlcxx::arg("this"));
    t.method("GetParentName", [](XrdCl::DirectoryList const* a)->const std::string & { return a->GetParentName(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void XrdCl::DirectoryList::SetParentName(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::DirectoryList::SetParentName(const std::string &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:826:12
    t.method("SetParentName", [](XrdCl::DirectoryList& a, const std::string & arg0)->void { a.SetParentName(arg0); }, jlcxx::arg("this"), jlcxx::arg("parent"));
    t.method("SetParentName", [](XrdCl::DirectoryList* a, const std::string & arg0)->void { a->SetParentName(arg0); }, jlcxx::arg("this"), jlcxx::arg("parent"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::DirectoryList::ParseServerResponse(const std::string &, const char *) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::DirectoryList::ParseServerResponse(const std::string &, const char *)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:837:12
    t.method("ParseServerResponse", [](XrdCl::DirectoryList& a, const std::string & arg0, const char * arg1)->bool { return a.ParseServerResponse(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("hostId"), jlcxx::arg("data"));
    t.method("ParseServerResponse", [](XrdCl::DirectoryList* a, const std::string & arg0, const char * arg1)->bool { return a->ParseServerResponse(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("hostId"), jlcxx::arg("data"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::DirectoryList::ParseServerResponse(const std::string &, const char *, bool) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::DirectoryList::ParseServerResponse(const std::string &, const char *, bool)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:843:12
    t.method("ParseServerResponse", [](XrdCl::DirectoryList& a, const std::string & arg0, const char * arg1, bool arg2)->bool { return a.ParseServerResponse(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("hostId"), jlcxx::arg("data"), jlcxx::arg("isDStat"));
    t.method("ParseServerResponse", [](XrdCl::DirectoryList* a, const std::string & arg0, const char * arg1, bool arg2)->bool { return a->ParseServerResponse(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("hostId"), jlcxx::arg("data"), jlcxx::arg("isDStat"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::DirectoryList::HasStatInfo(const char *) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::DirectoryList::HasStatInfo(const char *)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:850:19
    module_.method("XrdCl!DirectoryList!HasStatInfo", [](const char * arg0)->bool { return XrdCl::DirectoryList::HasStatInfo(arg0); }, jlcxx::arg("data"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::DirectoryList>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_DirectoryList(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_DirectoryList(module));
}
