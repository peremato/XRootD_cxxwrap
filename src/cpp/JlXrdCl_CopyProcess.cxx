// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::CopyProcess> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::CopyProcess> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::CopyProcess
// signature to use in the veto file: XrdCl::CopyProcess
struct JlXrdCl_CopyProcess: public Wrapper {

  JlXrdCl_CopyProcess(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::CopyProcess (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClCopyProcess.hh:107:9
    jlcxx::TypeWrapper<XrdCl::CopyProcess>  t = jlModule.add_type<XrdCl::CopyProcess>("XrdCl!CopyProcess");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::CopyProcess>>(new jlcxx::TypeWrapper<XrdCl::CopyProcess>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::CopyProcess::AddJob(const XrdCl::PropertyList &, XrdCl::PropertyList *) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::CopyProcess::AddJob(const XrdCl::PropertyList &, XrdCl::PropertyList *)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClCopyProcess.hh:167:20
    t.method("AddJob", [](XrdCl::CopyProcess& a, const XrdCl::PropertyList & arg0, XrdCl::PropertyList * arg1)->XrdCl::XRootDStatus { return a.AddJob(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("properties"), jlcxx::arg("results"));
    t.method("AddJob", [](XrdCl::CopyProcess* a, const XrdCl::PropertyList & arg0, XrdCl::PropertyList * arg1)->XrdCl::XRootDStatus { return a->AddJob(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("properties"), jlcxx::arg("results"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::CopyProcess::Prepare() (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::CopyProcess::Prepare()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClCopyProcess.hh:173:20
    t.method("Prepare", [](XrdCl::CopyProcess& a)->XrdCl::XRootDStatus { return a.Prepare(); }, jlcxx::arg("this"));
    t.method("Prepare", [](XrdCl::CopyProcess* a)->XrdCl::XRootDStatus { return a->Prepare(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::CopyProcess::Run(XrdCl::CopyProgressHandler *) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::CopyProcess::Run(XrdCl::CopyProgressHandler *)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClCopyProcess.hh:178:20
    t.method("Run", [](XrdCl::CopyProcess& a, XrdCl::CopyProgressHandler * arg0)->XrdCl::XRootDStatus { return a.Run(arg0); }, jlcxx::arg("this"), jlcxx::arg("handler"));
    t.method("Run", [](XrdCl::CopyProcess* a, XrdCl::CopyProgressHandler * arg0)->XrdCl::XRootDStatus { return a->Run(arg0); }, jlcxx::arg("this"), jlcxx::arg("handler"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::CopyProcess>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_CopyProcess(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_CopyProcess(module));
}
