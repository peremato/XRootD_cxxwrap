// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::Buffer> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::Buffer> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::Buffer
// signature to use in the veto file: XrdCl::Buffer
struct JlXrdCl_Buffer: public Wrapper {

  JlXrdCl_Buffer(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::Buffer (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:33:9
    jlcxx::TypeWrapper<XrdCl::Buffer>  t = jlModule.add_type<XrdCl::Buffer>("XrdCl!Buffer");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::Buffer>>(new jlcxx::TypeWrapper<XrdCl::Buffer>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );


    DEBUG_MSG("Adding wrapper for void XrdCl::Buffer::Buffer(uint32_t) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:39:7
    t.constructor<uint32_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("size")    );



    DEBUG_MSG("Adding wrapper for const char * XrdCl::Buffer::GetBuffer(uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: const char * XrdCl::Buffer::GetBuffer(uint32_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:72:19
    t.method("GetBuffer", [](XrdCl::Buffer const& a) { return (std::string)a.GetBuffer(); }, jlcxx::arg("this"), jlcxx::arg("offset"));
    t.method("GetBuffer", [](XrdCl::Buffer const& a, uint32_t arg0) { return (std::string)a.GetBuffer(arg0); }, jlcxx::arg("this"), jlcxx::arg("offset"));
    t.method("GetBuffer", [](XrdCl::Buffer const* a) { return (std::string)a->GetBuffer(); }, jlcxx::arg("this"), jlcxx::arg("offset"));
    t.method("GetBuffer", [](XrdCl::Buffer const* a, uint32_t arg0) { return (std::string)a->GetBuffer(arg0); }, jlcxx::arg("this"), jlcxx::arg("offset"));

    DEBUG_MSG("Adding wrapper for char * XrdCl::Buffer::GetBuffer(uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: char * XrdCl::Buffer::GetBuffer(uint32_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:80:13
    t.method("GetBuffer", [](XrdCl::Buffer& a)->char * { return a.GetBuffer(); }, jlcxx::arg("this"), jlcxx::arg("offset"));
    t.method("GetBuffer", [](XrdCl::Buffer& a, uint32_t arg0)->char * { return a.GetBuffer(arg0); }, jlcxx::arg("this"), jlcxx::arg("offset"));
    t.method("GetBuffer", [](XrdCl::Buffer* a)->char * { return a->GetBuffer(); }, jlcxx::arg("this"), jlcxx::arg("offset"));
    t.method("GetBuffer", [](XrdCl::Buffer* a, uint32_t arg0)->char * { return a->GetBuffer(arg0); }, jlcxx::arg("this"), jlcxx::arg("offset"));

    DEBUG_MSG("Adding wrapper for void XrdCl::Buffer::ReAllocate(uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::Buffer::ReAllocate(uint32_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:88:12
    t.method("ReAllocate", [](XrdCl::Buffer& a, uint32_t arg0)->void { a.ReAllocate(arg0); }, jlcxx::arg("this"), jlcxx::arg("size"));
    t.method("ReAllocate", [](XrdCl::Buffer* a, uint32_t arg0)->void { a->ReAllocate(arg0); }, jlcxx::arg("this"), jlcxx::arg("size"));

    DEBUG_MSG("Adding wrapper for void XrdCl::Buffer::Free() (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::Buffer::Free()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:99:12
    t.method("Free", [](XrdCl::Buffer& a)->void { a.Free(); }, jlcxx::arg("this"));
    t.method("Free", [](XrdCl::Buffer* a)->void { a->Free(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void XrdCl::Buffer::Allocate(uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::Buffer::Allocate(uint32_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:110:12
    t.method("Allocate", [](XrdCl::Buffer& a, uint32_t arg0)->void { a.Allocate(arg0); }, jlcxx::arg("this"), jlcxx::arg("size"));
    t.method("Allocate", [](XrdCl::Buffer* a, uint32_t arg0)->void { a->Allocate(arg0); }, jlcxx::arg("this"), jlcxx::arg("size"));

    DEBUG_MSG("Adding wrapper for void XrdCl::Buffer::Zero() (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::Buffer::Zero()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:124:12
    t.method("Zero", [](XrdCl::Buffer& a)->void { a.Zero(); }, jlcxx::arg("this"));
    t.method("Zero", [](XrdCl::Buffer* a)->void { a->Zero(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for uint32_t XrdCl::Buffer::GetSize() (" __HERE__ ")");
    // signature to use in the veto list: uint32_t XrdCl::Buffer::GetSize()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:132:16
    t.method("GetSize", [](XrdCl::Buffer const& a)->uint32_t { return a.GetSize(); }, jlcxx::arg("this"));
    t.method("GetSize", [](XrdCl::Buffer const* a)->uint32_t { return a->GetSize(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for uint32_t XrdCl::Buffer::GetCursor() (" __HERE__ ")");
    // signature to use in the veto list: uint32_t XrdCl::Buffer::GetCursor()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:140:16
    t.method("GetCursor", [](XrdCl::Buffer const& a)->uint32_t { return a.GetCursor(); }, jlcxx::arg("this"));
    t.method("GetCursor", [](XrdCl::Buffer const* a)->uint32_t { return a->GetCursor(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void XrdCl::Buffer::SetCursor(uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::Buffer::SetCursor(uint32_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:148:12
    t.method("SetCursor", [](XrdCl::Buffer& a, uint32_t arg0)->void { a.SetCursor(arg0); }, jlcxx::arg("this"), jlcxx::arg("cursor"));
    t.method("SetCursor", [](XrdCl::Buffer* a, uint32_t arg0)->void { a->SetCursor(arg0); }, jlcxx::arg("this"), jlcxx::arg("cursor"));

    DEBUG_MSG("Adding wrapper for void XrdCl::Buffer::AdvanceCursor(uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::Buffer::AdvanceCursor(uint32_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:156:12
    t.method("AdvanceCursor", [](XrdCl::Buffer& a, uint32_t arg0)->void { a.AdvanceCursor(arg0); }, jlcxx::arg("this"), jlcxx::arg("delta"));
    t.method("AdvanceCursor", [](XrdCl::Buffer* a, uint32_t arg0)->void { a->AdvanceCursor(arg0); }, jlcxx::arg("this"), jlcxx::arg("delta"));

    DEBUG_MSG("Adding wrapper for void XrdCl::Buffer::Append(const char *, uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::Buffer::Append(const char *, uint32_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:164:12
    t.method("Append", [](XrdCl::Buffer& a, const char * arg0, uint32_t arg1)->void { a.Append(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("buffer"), jlcxx::arg("size"));
    t.method("Append", [](XrdCl::Buffer* a, const char * arg0, uint32_t arg1)->void { a->Append(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("buffer"), jlcxx::arg("size"));

    DEBUG_MSG("Adding wrapper for void XrdCl::Buffer::Append(const char *, uint32_t, uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::Buffer::Append(const char *, uint32_t, uint32_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:177:12
    t.method("Append", [](XrdCl::Buffer& a, const char * arg0, uint32_t arg1, uint32_t arg2)->void { a.Append(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("buffer"), jlcxx::arg("size"), jlcxx::arg("offset"));
    t.method("Append", [](XrdCl::Buffer* a, const char * arg0, uint32_t arg1, uint32_t arg2)->void { a->Append(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("buffer"), jlcxx::arg("size"), jlcxx::arg("offset"));

    DEBUG_MSG("Adding wrapper for char * XrdCl::Buffer::GetBufferAtCursor() (" __HERE__ ")");
    // signature to use in the veto list: char * XrdCl::Buffer::GetBufferAtCursor()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:189:13
    t.method("GetBufferAtCursor", [](XrdCl::Buffer& a)->char * { return a.GetBufferAtCursor(); }, jlcxx::arg("this"));
    t.method("GetBufferAtCursor", [](XrdCl::Buffer* a)->char * { return a->GetBufferAtCursor(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const char * XrdCl::Buffer::GetBufferAtCursor() (" __HERE__ ")");
    // signature to use in the veto list: const char * XrdCl::Buffer::GetBufferAtCursor()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:197:19
    t.method("GetBufferAtCursor", [](XrdCl::Buffer const& a) { return (std::string)a.GetBufferAtCursor(); }, jlcxx::arg("this"));
    t.method("GetBufferAtCursor", [](XrdCl::Buffer const* a) { return (std::string)a->GetBufferAtCursor(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void XrdCl::Buffer::FromString(const std::string) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::Buffer::FromString(const std::string)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:205:12
    t.method("FromString", [](XrdCl::Buffer& a, const std::string arg0)->void { a.FromString(arg0); }, jlcxx::arg("this"), jlcxx::arg("str"));
    t.method("FromString", [](XrdCl::Buffer* a, const std::string arg0)->void { a->FromString(arg0); }, jlcxx::arg("this"), jlcxx::arg("str"));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::Buffer::ToString() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::Buffer::ToString()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:215:19
    t.method("ToString", [](XrdCl::Buffer const& a)->std::string { return a.ToString(); }, jlcxx::arg("this"));
    t.method("ToString", [](XrdCl::Buffer const* a)->std::string { return a->ToString(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void XrdCl::Buffer::Grab(char *, uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::Buffer::Grab(char *, uint32_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:228:12
    t.method("Grab", [](XrdCl::Buffer& a, char * arg0, uint32_t arg1)->void { a.Grab(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("buffer"), jlcxx::arg("size"));
    t.method("Grab", [](XrdCl::Buffer* a, char * arg0, uint32_t arg1)->void { a->Grab(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("buffer"), jlcxx::arg("size"));

    DEBUG_MSG("Adding wrapper for char * XrdCl::Buffer::Release() (" __HERE__ ")");
    // signature to use in the veto list: char * XrdCl::Buffer::Release()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClBuffer.hh:238:13
    t.method("Release", [](XrdCl::Buffer& a)->char * { return a.Release(); }, jlcxx::arg("this"));
    t.method("Release", [](XrdCl::Buffer* a)->char * { return a->Release(); }, jlcxx::arg("this"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::Buffer>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_Buffer(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_Buffer(module));
}
