// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::PropertyList> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::PropertyList> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::PropertyList
// signature to use in the veto file: XrdCl::PropertyList
struct JlXrdCl_PropertyList: public Wrapper {

  JlXrdCl_PropertyList(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::PropertyList (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClPropertyList.hh:40:9
    jlcxx::TypeWrapper<XrdCl::PropertyList>  t = jlModule.add_type<XrdCl::PropertyList>("XrdCl!PropertyList");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::PropertyList>>(new jlcxx::TypeWrapper<XrdCl::PropertyList>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );

    DEBUG_MSG("Adding wrapper for bool XrdCl::PropertyList::HasProperty(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::PropertyList::HasProperty(const std::string &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClPropertyList.hh:142:12
    t.method("HasProperty", [](XrdCl::PropertyList const& a, const std::string & arg0)->bool { return a.HasProperty(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));
    t.method("HasProperty", [](XrdCl::PropertyList const* a, const std::string & arg0)->bool { return a->HasProperty(arg0); }, jlcxx::arg("this"), jlcxx::arg("name"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::PropertyList::HasProperty(const std::string &, uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::PropertyList::HasProperty(const std::string &, uint32_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClPropertyList.hh:150:12
    t.method("HasProperty", [](XrdCl::PropertyList const& a, const std::string & arg0, uint32_t arg1)->bool { return a.HasProperty(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("index"));
    t.method("HasProperty", [](XrdCl::PropertyList const* a, const std::string & arg0, uint32_t arg1)->bool { return a->HasProperty(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("index"));

    DEBUG_MSG("Adding wrapper for void XrdCl::PropertyList::Clear() (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::PropertyList::Clear()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClPropertyList.hh:176:12
    t.method("Clear", [](XrdCl::PropertyList& a)->void { a.Clear(); }, jlcxx::arg("this"));
    t.method("Clear", [](XrdCl::PropertyList* a)->void { a->Clear(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::PropertyList::Get(const std::string &, std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::PropertyList::Get(const std::string &, std::string &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClPropertyList.hh:189:29
    t.method("Get", [](XrdCl::PropertyList const& a, const std::string & arg0, std::string & arg1)->bool { return a.Get(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("item"));
    t.method("Get", [](XrdCl::PropertyList const* a, const std::string & arg0, std::string & arg1)->bool { return a->Get(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("item"));

    DEBUG_MSG("Adding wrapper for void XrdCl::PropertyList::Set(const std::string &, const XrdCl::XRootDStatus &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::PropertyList::Set(const std::string &, const XrdCl::XRootDStatus &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClPropertyList.hh:214:29
    t.method("Set", [](XrdCl::PropertyList& a, const std::string & arg0, const XrdCl::XRootDStatus & arg1)->void { a.Set(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("item"));
    t.method("Set", [](XrdCl::PropertyList* a, const std::string & arg0, const XrdCl::XRootDStatus & arg1)->void { a->Set(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("item"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::PropertyList::Get(const std::string &, XrdCl::XRootDStatus &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::PropertyList::Get(const std::string &, XrdCl::XRootDStatus &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClPropertyList.hh:227:29
    t.method("Get", [](XrdCl::PropertyList const& a, const std::string & arg0, XrdCl::XRootDStatus & arg1)->bool { return a.Get(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("item"));
    t.method("Get", [](XrdCl::PropertyList const* a, const std::string & arg0, XrdCl::XRootDStatus & arg1)->bool { return a->Get(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("item"));

    DEBUG_MSG("Adding wrapper for void XrdCl::PropertyList::Set(const std::string &, const XrdCl::URL &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::PropertyList::Set(const std::string &, const XrdCl::URL &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClPropertyList.hh:262:29
    t.method("Set", [](XrdCl::PropertyList& a, const std::string & arg0, const XrdCl::URL & arg1)->void { a.Set(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("item"));
    t.method("Set", [](XrdCl::PropertyList* a, const std::string & arg0, const XrdCl::URL & arg1)->void { a->Set(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("item"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::PropertyList::Get(const std::string &, XrdCl::URL &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::PropertyList::Get(const std::string &, XrdCl::URL &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClPropertyList.hh:272:29
    t.method("Get", [](XrdCl::PropertyList const& a, const std::string & arg0, XrdCl::URL & arg1)->bool { return a.Get(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("item"));
    t.method("Get", [](XrdCl::PropertyList const* a, const std::string & arg0, XrdCl::URL & arg1)->bool { return a->Get(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("item"));

    DEBUG_MSG("Adding wrapper for void XrdCl::PropertyList::Set(const std::string &, const std::vector<std::string> &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::PropertyList::Set(const std::string &, const std::vector<std::string> &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClPropertyList.hh:287:29
    t.method("Set", [](XrdCl::PropertyList& a, const std::string & arg0, const std::vector<std::string> & arg1)->void { a.Set(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("item"));
    t.method("Set", [](XrdCl::PropertyList* a, const std::string & arg0, const std::vector<std::string> & arg1)->void { a->Set(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("item"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::PropertyList::Get(const std::string &, std::vector<std::string> &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::PropertyList::Get(const std::string &, std::vector<std::string> &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClPropertyList.hh:301:29
    t.method("Get", [](XrdCl::PropertyList const& a, const std::string & arg0, std::vector<std::string> & arg1)->bool { return a.Get(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("item"));
    t.method("Get", [](XrdCl::PropertyList const* a, const std::string & arg0, std::vector<std::string> & arg1)->bool { return a->Get(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("name"), jlcxx::arg("item"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::PropertyList>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_PropertyList(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_PropertyList(module));
}
