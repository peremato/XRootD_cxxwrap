// this file was auto-generated by wrapit 5168a24
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::PropertyList> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::PropertyList> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::PropertyList
// signature to use in the veto file: XrdCl::PropertyList
struct JlXrdCl_PropertyList: public Wrapper {

  JlXrdCl_PropertyList(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::PropertyList (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClPropertyList.hh:40:9
    jlcxx::TypeWrapper<XrdCl::PropertyList>  t = jlModule.add_type<XrdCl::PropertyList>("XrdCl!PropertyList");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::PropertyList>>(new jlcxx::TypeWrapper<XrdCl::PropertyList>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for bool XrdCl::PropertyList::HasProperty(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::PropertyList::HasProperty(const std::string &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClPropertyList.hh:142:12
    t.method("HasProperty", static_cast<bool (XrdCl::PropertyList::*)(const std::string &)  const>(&XrdCl::PropertyList::HasProperty));

    DEBUG_MSG("Adding wrapper for bool XrdCl::PropertyList::HasProperty(const std::string &, uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::PropertyList::HasProperty(const std::string &, uint32_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClPropertyList.hh:150:12
    t.method("HasProperty", static_cast<bool (XrdCl::PropertyList::*)(const std::string &, uint32_t)  const>(&XrdCl::PropertyList::HasProperty));

    DEBUG_MSG("Adding wrapper for void XrdCl::PropertyList::Clear() (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::PropertyList::Clear()
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClPropertyList.hh:176:12
    t.method("Clear", static_cast<void (XrdCl::PropertyList::*)() >(&XrdCl::PropertyList::Clear));

    DEBUG_MSG("Adding wrapper for bool XrdCl::PropertyList::Get(const std::string &, std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::PropertyList::Get(const std::string &, std::string &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClPropertyList.hh:189:29
    t.method("Get", static_cast<bool (XrdCl::PropertyList::*)(const std::string &, std::string &)  const>(&XrdCl::PropertyList::Get));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::PropertyList::Get(const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::PropertyList::Get(const std::string &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClPropertyList.hh:201:36
    t.method("Get", static_cast<std::string (XrdCl::PropertyList::*)(const std::string &)  const>(&XrdCl::PropertyList::Get));

    DEBUG_MSG("Adding wrapper for void XrdCl::PropertyList::Set(const std::string &, const XrdCl::XRootDStatus &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::PropertyList::Set(const std::string &, const XrdCl::XRootDStatus &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClPropertyList.hh:214:29
    t.method("Set", static_cast<void (XrdCl::PropertyList::*)(const std::string &, const XrdCl::XRootDStatus &) >(&XrdCl::PropertyList::Set));

    DEBUG_MSG("Adding wrapper for bool XrdCl::PropertyList::Get(const std::string &, XrdCl::XRootDStatus &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::PropertyList::Get(const std::string &, XrdCl::XRootDStatus &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClPropertyList.hh:227:29
    t.method("Get", static_cast<bool (XrdCl::PropertyList::*)(const std::string &, XrdCl::XRootDStatus &)  const>(&XrdCl::PropertyList::Get));

    DEBUG_MSG("Adding wrapper for void XrdCl::PropertyList::Set(const std::string &, const XrdCl::URL &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::PropertyList::Set(const std::string &, const XrdCl::URL &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClPropertyList.hh:262:29
    t.method("Set", static_cast<void (XrdCl::PropertyList::*)(const std::string &, const XrdCl::URL &) >(&XrdCl::PropertyList::Set));

    DEBUG_MSG("Adding wrapper for bool XrdCl::PropertyList::Get(const std::string &, XrdCl::URL &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::PropertyList::Get(const std::string &, XrdCl::URL &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClPropertyList.hh:272:29
    t.method("Get", static_cast<bool (XrdCl::PropertyList::*)(const std::string &, XrdCl::URL &)  const>(&XrdCl::PropertyList::Get));

    DEBUG_MSG("Adding wrapper for void XrdCl::PropertyList::Set(const std::string &, const std::vector<std::string> &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::PropertyList::Set(const std::string &, const std::vector<std::string> &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClPropertyList.hh:287:29
    t.method("Set", static_cast<void (XrdCl::PropertyList::*)(const std::string &, const std::vector<std::string> &) >(&XrdCl::PropertyList::Set));

    DEBUG_MSG("Adding wrapper for bool XrdCl::PropertyList::Get(const std::string &, std::vector<std::string> &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::PropertyList::Get(const std::string &, std::vector<std::string> &)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClPropertyList.hh:301:29
    t.method("Get", static_cast<bool (XrdCl::PropertyList::*)(const std::string &, std::vector<std::string> &)  const>(&XrdCl::PropertyList::Get));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::PropertyList>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_PropertyList(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_PropertyList(module));
}
