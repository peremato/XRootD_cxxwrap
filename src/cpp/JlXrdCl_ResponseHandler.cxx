// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::ResponseHandler> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::ResponseHandler> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::ResponseHandler
// signature to use in the veto file: XrdCl::ResponseHandler
struct JlXrdCl_ResponseHandler: public Wrapper {

  JlXrdCl_ResponseHandler(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::ResponseHandler (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1126:9
    jlcxx::TypeWrapper<XrdCl::ResponseHandler>  t = jlModule.add_type<XrdCl::ResponseHandler>("XrdCl!ResponseHandler");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::ResponseHandler>>(new jlcxx::TypeWrapper<XrdCl::ResponseHandler>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );

    DEBUG_MSG("Adding wrapper for void XrdCl::ResponseHandler::HandleResponseWithHosts(XrdCl::XRootDStatus *, XrdCl::AnyObject *, XrdCl::HostList *) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::ResponseHandler::HandleResponseWithHosts(XrdCl::XRootDStatus *, XrdCl::AnyObject *, XrdCl::HostList *)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1140:20
    t.method("HandleResponseWithHosts", [](XrdCl::ResponseHandler& a, XrdCl::XRootDStatus * arg0, XrdCl::AnyObject * arg1, XrdCl::HostList * arg2)->void { a.HandleResponseWithHosts(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("status"), jlcxx::arg("response"), jlcxx::arg("hostList"));
    t.method("HandleResponseWithHosts", [](XrdCl::ResponseHandler* a, XrdCl::XRootDStatus * arg0, XrdCl::AnyObject * arg1, XrdCl::HostList * arg2)->void { a->HandleResponseWithHosts(arg0, arg1, arg2); }, jlcxx::arg("this"), jlcxx::arg("status"), jlcxx::arg("response"), jlcxx::arg("hostList"));

    DEBUG_MSG("Adding wrapper for void XrdCl::ResponseHandler::HandleResponse(XrdCl::XRootDStatus *, XrdCl::AnyObject *) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::ResponseHandler::HandleResponse(XrdCl::XRootDStatus *, XrdCl::AnyObject *)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1156:20
    t.method("HandleResponse", [](XrdCl::ResponseHandler& a, XrdCl::XRootDStatus * arg0, XrdCl::AnyObject * arg1)->void { a.HandleResponse(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("status"), jlcxx::arg("response"));
    t.method("HandleResponse", [](XrdCl::ResponseHandler* a, XrdCl::XRootDStatus * arg0, XrdCl::AnyObject * arg1)->void { a->HandleResponse(arg0, arg1); }, jlcxx::arg("this"), jlcxx::arg("status"), jlcxx::arg("response"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::ResponseHandler>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_ResponseHandler(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_ResponseHandler(module));
}
