// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::XAttrStatus> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::XAttrStatus> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::XAttrStatus
// signature to use in the veto file: XrdCl::XAttrStatus
struct JlXrdCl_XAttrStatus: public Wrapper {

  JlXrdCl_XAttrStatus(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::XAttrStatus (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:294:10
    jlcxx::TypeWrapper<XrdCl::XAttrStatus>  t = jlModule.add_type<XrdCl::XAttrStatus>("XrdCl!XAttrStatus");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::XAttrStatus>>(new jlcxx::TypeWrapper<XrdCl::XAttrStatus>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void XrdCl::XAttrStatus::XAttrStatus(const std::string &, const XrdCl::XRootDStatus &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:299:7
    t.constructor<const std::string &, const XrdCl::XRootDStatus &>(/*finalize=*/true);

    DEBUG_MSG("Adding name methods  to provide read access to the field name (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:305:19
    // signature to use in the veto list: XrdCl::XAttrStatus::name
    t.method("name", [](const XrdCl::XAttrStatus& a) -> const std::string& { return a.name; });
    t.method("name", [](XrdCl::XAttrStatus& a) -> std::string& { return a.name; });
    t.method("name", [](const XrdCl::XAttrStatus* a) -> const std::string& { return a->name; });
    t.method("name", [](XrdCl::XAttrStatus* a) -> std::string& { return a->name; });
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:305:19
    // signature to use in the veto list: XrdCl::XAttrStatus::name
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding name! methods to provide write access to the field name (" __HERE__ ")");
    t.method("name!", [](XrdCl::XAttrStatus& a, const std::string& val) -> std::string& { return a.name = val; });

    DEBUG_MSG("Adding name! methods to provide write access to the field name (" __HERE__ ")");
    t.method("name!", [](XrdCl::XAttrStatus* a, const std::string& val) -> std::string& { return a->name = val; });

    DEBUG_MSG("Adding status methods  to provide read access to the field status (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:306:20
    // signature to use in the veto list: XrdCl::XAttrStatus::status
    t.method("status", [](const XrdCl::XAttrStatus& a) -> const XrdCl::XRootDStatus& { return a.status; });
    t.method("status", [](XrdCl::XAttrStatus& a) -> XrdCl::XRootDStatus& { return a.status; });
    t.method("status", [](const XrdCl::XAttrStatus* a) -> const XrdCl::XRootDStatus& { return a->status; });
    t.method("status", [](XrdCl::XAttrStatus* a) -> XrdCl::XRootDStatus& { return a->status; });
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:306:20
    // signature to use in the veto list: XrdCl::XAttrStatus::status
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding status! methods to provide write access to the field status (" __HERE__ ")");
    t.method("status!", [](XrdCl::XAttrStatus& a, const XrdCl::XRootDStatus& val) -> XrdCl::XRootDStatus& { return a.status = val; });

    DEBUG_MSG("Adding status! methods to provide write access to the field status (" __HERE__ ")");
    t.method("status!", [](XrdCl::XAttrStatus* a, const XrdCl::XRootDStatus& val) -> XrdCl::XRootDStatus& { return a->status = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::XAttrStatus>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_XAttrStatus(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_XAttrStatus(module));
}
