// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::LocationInfo> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::LocationInfo> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::LocationInfo
// signature to use in the veto file: XrdCl::LocationInfo
struct JlXrdCl_LocationInfo: public Wrapper {

  JlXrdCl_LocationInfo(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::LocationInfo (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:43:9
    jlcxx::TypeWrapper<XrdCl::LocationInfo>  t = jlModule.add_type<XrdCl::LocationInfo>("XrdCl!LocationInfo");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::LocationInfo>>(new jlcxx::TypeWrapper<XrdCl::LocationInfo>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );

    DEBUG_MSG("Adding wrapper for uint32_t XrdCl::LocationInfo::GetSize() (" __HERE__ ")");
    // signature to use in the veto list: uint32_t XrdCl::LocationInfo::GetSize()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:152:16
    t.method("GetSize", [](XrdCl::LocationInfo const& a)->uint32_t { return a.GetSize(); }, jlcxx::arg("this"));
    t.method("GetSize", [](XrdCl::LocationInfo const* a)->uint32_t { return a->GetSize(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for XrdCl::LocationInfo::Location & XrdCl::LocationInfo::At(uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::LocationInfo::Location & XrdCl::LocationInfo::At(uint32_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:160:17
    t.method("At", [](XrdCl::LocationInfo& a, uint32_t arg0)->XrdCl::LocationInfo::Location & { return a.At(arg0); }, jlcxx::arg("this"), jlcxx::arg("index"));
    t.method("At", [](XrdCl::LocationInfo* a, uint32_t arg0)->XrdCl::LocationInfo::Location & { return a->At(arg0); }, jlcxx::arg("this"), jlcxx::arg("index"));

    DEBUG_MSG("Adding wrapper for void XrdCl::LocationInfo::Add(const XrdCl::LocationInfo::Location &) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::LocationInfo::Add(const XrdCl::LocationInfo::Location &)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:200:12
    t.method("Add", [](XrdCl::LocationInfo& a, const XrdCl::LocationInfo::Location & arg0)->void { a.Add(arg0); }, jlcxx::arg("this"), jlcxx::arg("location"));
    t.method("Add", [](XrdCl::LocationInfo* a, const XrdCl::LocationInfo::Location & arg0)->void { a->Add(arg0); }, jlcxx::arg("this"), jlcxx::arg("location"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::LocationInfo::ParseServerResponse(const char *) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::LocationInfo::ParseServerResponse(const char *)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:208:12
    t.method("ParseServerResponse", [](XrdCl::LocationInfo& a, const char * arg0)->bool { return a.ParseServerResponse(arg0); }, jlcxx::arg("this"), jlcxx::arg("data"));
    t.method("ParseServerResponse", [](XrdCl::LocationInfo* a, const char * arg0)->bool { return a->ParseServerResponse(arg0); }, jlcxx::arg("this"), jlcxx::arg("data"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::LocationInfo>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_LocationInfo(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_LocationInfo(module));
}
