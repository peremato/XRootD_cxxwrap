// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::DirectoryList::ListEntry> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::DirectoryList::ListEntry> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::DirectoryList::ListEntry
// signature to use in the veto file: XrdCl::DirectoryList::ListEntry
struct JlXrdCl_DirectoryList_ListEntry: public Wrapper {

  JlXrdCl_DirectoryList_ListEntry(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::DirectoryList::ListEntry (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:657:13
    jlcxx::TypeWrapper<XrdCl::DirectoryList::ListEntry>  t = jlModule.add_type<XrdCl::DirectoryList::ListEntry>("XrdCl!DirectoryList!ListEntry");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::DirectoryList::ListEntry>>(new jlcxx::TypeWrapper<XrdCl::DirectoryList::ListEntry>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void XrdCl::DirectoryList::ListEntry::ListEntry(const std::string &, const std::string &, XrdCl::StatInfo *) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:663:11
    t.constructor<const std::string &, const std::string &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("hostAddress"), jlcxx::arg("name")    );
    t.constructor<const std::string &, const std::string &, XrdCl::StatInfo *>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("hostAddress"), jlcxx::arg("name"), jlcxx::arg("statInfo")    );

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::DirectoryList::ListEntry::GetHostAddress() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::DirectoryList::ListEntry::GetHostAddress()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:682:30
    t.method("GetHostAddress", [](XrdCl::DirectoryList::ListEntry const& a)->const std::string & { return a.GetHostAddress(); }, jlcxx::arg("this"));
    t.method("GetHostAddress", [](XrdCl::DirectoryList::ListEntry const* a)->const std::string & { return a->GetHostAddress(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::DirectoryList::ListEntry::GetName() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::DirectoryList::ListEntry::GetName()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:690:30
    t.method("GetName", [](XrdCl::DirectoryList::ListEntry const& a)->const std::string & { return a.GetName(); }, jlcxx::arg("this"));
    t.method("GetName", [](XrdCl::DirectoryList::ListEntry const* a)->const std::string & { return a->GetName(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for XrdCl::StatInfo * XrdCl::DirectoryList::ListEntry::GetStatInfo() (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::StatInfo * XrdCl::DirectoryList::ListEntry::GetStatInfo()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:698:21
    t.method("GetStatInfo", [](XrdCl::DirectoryList::ListEntry& a)->XrdCl::StatInfo * { return a.GetStatInfo(); }, jlcxx::arg("this"));
    t.method("GetStatInfo", [](XrdCl::DirectoryList::ListEntry* a)->XrdCl::StatInfo * { return a->GetStatInfo(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const XrdCl::StatInfo * XrdCl::DirectoryList::ListEntry::GetStatInfo() (" __HERE__ ")");
    // signature to use in the veto list: const XrdCl::StatInfo * XrdCl::DirectoryList::ListEntry::GetStatInfo()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:706:27
    t.method("GetStatInfo", [](XrdCl::DirectoryList::ListEntry const& a)->const XrdCl::StatInfo * { return a.GetStatInfo(); }, jlcxx::arg("this"));
    t.method("GetStatInfo", [](XrdCl::DirectoryList::ListEntry const* a)->const XrdCl::StatInfo * { return a->GetStatInfo(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void XrdCl::DirectoryList::ListEntry::SetStatInfo(XrdCl::StatInfo *) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::DirectoryList::ListEntry::SetStatInfo(XrdCl::StatInfo *)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:714:16
    t.method("SetStatInfo", [](XrdCl::DirectoryList::ListEntry& a, XrdCl::StatInfo * arg0)->void { a.SetStatInfo(arg0); }, jlcxx::arg("this"), jlcxx::arg("info"));
    t.method("SetStatInfo", [](XrdCl::DirectoryList::ListEntry* a, XrdCl::StatInfo * arg0)->void { a->SetStatInfo(arg0); }, jlcxx::arg("this"), jlcxx::arg("info"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::DirectoryList::ListEntry>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_DirectoryList_ListEntry(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_DirectoryList_ListEntry(module));
}
