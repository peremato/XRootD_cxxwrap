// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::PageInfo> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::PageInfo> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::PageInfo
// signature to use in the veto file: XrdCl::PageInfo
struct JlXrdCl_PageInfo: public Wrapper {

  JlXrdCl_PageInfo(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::PageInfo (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:956:10
    jlcxx::TypeWrapper<XrdCl::PageInfo>  t = jlModule.add_type<XrdCl::PageInfo>("XrdCl!PageInfo");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::PageInfo>>(new jlcxx::TypeWrapper<XrdCl::PageInfo>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );




    DEBUG_MSG("Adding wrapper for uint64_t XrdCl::PageInfo::GetOffset() (" __HERE__ ")");
    // signature to use in the veto list: uint64_t XrdCl::PageInfo::GetOffset()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:982:14
    t.method("GetOffset", [](XrdCl::PageInfo const& a)->uint64_t { return a.GetOffset(); }, jlcxx::arg("this"));
    t.method("GetOffset", [](XrdCl::PageInfo const* a)->uint64_t { return a->GetOffset(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for uint32_t XrdCl::PageInfo::GetLength() (" __HERE__ ")");
    // signature to use in the veto list: uint32_t XrdCl::PageInfo::GetLength()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:987:14
    t.method("GetLength", [](XrdCl::PageInfo const& a)->uint32_t { return a.GetLength(); }, jlcxx::arg("this"));
    t.method("GetLength", [](XrdCl::PageInfo const* a)->uint32_t { return a->GetLength(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void * XrdCl::PageInfo::GetBuffer() (" __HERE__ ")");
    // signature to use in the veto list: void * XrdCl::PageInfo::GetBuffer()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:992:11
    t.method("GetBuffer", [](XrdCl::PageInfo& a)->void * { return a.GetBuffer(); }, jlcxx::arg("this"));
    t.method("GetBuffer", [](XrdCl::PageInfo* a)->void * { return a->GetBuffer(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for std::vector<uint32_t> & XrdCl::PageInfo::GetCksums() (" __HERE__ ")");
    // signature to use in the veto list: std::vector<uint32_t> & XrdCl::PageInfo::GetCksums()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:997:28
    t.method("GetCksums", [](XrdCl::PageInfo& a)->std::vector<uint32_t> & { return a.GetCksums(); }, jlcxx::arg("this"));
    t.method("GetCksums", [](XrdCl::PageInfo* a)->std::vector<uint32_t> & { return a->GetCksums(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for size_t XrdCl::PageInfo::GetNbRepair() (" __HERE__ ")");
    // signature to use in the veto list: size_t XrdCl::PageInfo::GetNbRepair()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1002:12
    t.method("GetNbRepair", [](XrdCl::PageInfo& a)->size_t { return a.GetNbRepair(); }, jlcxx::arg("this"));
    t.method("GetNbRepair", [](XrdCl::PageInfo* a)->size_t { return a->GetNbRepair(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void XrdCl::PageInfo::SetNbRepair(size_t) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::PageInfo::SetNbRepair(size_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:1007:10
    t.method("SetNbRepair", [](XrdCl::PageInfo& a, size_t arg0)->void { a.SetNbRepair(arg0); }, jlcxx::arg("this"), jlcxx::arg("nbrepair"));
    t.method("SetNbRepair", [](XrdCl::PageInfo* a, size_t arg0)->void { a->SetNbRepair(arg0); }, jlcxx::arg("this"), jlcxx::arg("nbrepair"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::PageInfo>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_PageInfo(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_PageInfo(module));
}
