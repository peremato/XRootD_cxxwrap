// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::XAttr> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::XAttr> : std::false_type { };
template<> struct SuperType<XrdCl::XAttr> { typedef XrdCl::XAttrStatus type; };
}

// Class generating the wrapper for type XrdCl::XAttr
// signature to use in the veto file: XrdCl::XAttr
struct JlXrdCl_XAttr: public Wrapper {

  JlXrdCl_XAttr(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::XAttr (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:312:10
    jlcxx::TypeWrapper<XrdCl::XAttr>  t = jlModule.add_type<XrdCl::XAttr>("XrdCl!XAttr",
      jlcxx::julia_base_type<XrdCl::XAttrStatus>());
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::XAttr>>(new jlcxx::TypeWrapper<XrdCl::XAttr>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void XrdCl::XAttr::XAttr(const std::string &, const XrdCl::XRootDStatus &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:317:7
    t.constructor<const std::string &, const XrdCl::XRootDStatus &>(/*finalize=*/true);


    DEBUG_MSG("Adding wrapper for void XrdCl::XAttr::XAttr(const std::string &, const std::string &, const XrdCl::XRootDStatus &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:323:7
    t.constructor<const std::string &>(/*finalize=*/true);
    t.constructor<const std::string &, const std::string &>(/*finalize=*/true);
    t.constructor<const std::string &, const std::string &, const XrdCl::XRootDStatus &>(/*finalize=*/true);

    DEBUG_MSG("Adding value methods  to provide read access to the field value (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:330:19
    // signature to use in the veto list: XrdCl::XAttr::value
    t.method("value", [](const XrdCl::XAttr& a) -> const std::string& { return a.value; });
    t.method("value", [](XrdCl::XAttr& a) -> std::string& { return a.value; });
    t.method("value", [](const XrdCl::XAttr* a) -> const std::string& { return a->value; });
    t.method("value", [](XrdCl::XAttr* a) -> std::string& { return a->value; });
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:330:19
    // signature to use in the veto list: XrdCl::XAttr::value
    // with ! suffix to veto the setter only.
    DEBUG_MSG("Adding value! methods to provide write access to the field value (" __HERE__ ")");
    t.method("value!", [](XrdCl::XAttr& a, const std::string& val) -> std::string& { return a.value = val; });

    DEBUG_MSG("Adding value! methods to provide write access to the field value (" __HERE__ ")");
    t.method("value!", [](XrdCl::XAttr* a, const std::string& val) -> std::string& { return a->value = val; });
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::XAttr>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_XAttr(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_XAttr(module));
}
