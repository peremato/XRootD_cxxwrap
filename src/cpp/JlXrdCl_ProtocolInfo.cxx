// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::ProtocolInfo> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::ProtocolInfo> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::ProtocolInfo
// signature to use in the veto file: XrdCl::ProtocolInfo
struct JlXrdCl_ProtocolInfo: public Wrapper {

  JlXrdCl_ProtocolInfo(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::ProtocolInfo (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:341:9
    jlcxx::TypeWrapper<XrdCl::ProtocolInfo>  t = jlModule.add_type<XrdCl::ProtocolInfo>("XrdCl!ProtocolInfo");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::ProtocolInfo>>(new jlcxx::TypeWrapper<XrdCl::ProtocolInfo>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.method("delete", [](XrdCl::ProtocolInfo* self){ delete self; });

    DEBUG_MSG("Adding wrapper for void XrdCl::ProtocolInfo::ProtocolInfo(uint32_t, uint32_t) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:359:7
    t.constructor<uint32_t, uint32_t>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for uint32_t XrdCl::ProtocolInfo::GetVersion() (" __HERE__ ")");
    // signature to use in the veto list: uint32_t XrdCl::ProtocolInfo::GetVersion()
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:365:16
    t.method("GetVersion", static_cast<uint32_t (XrdCl::ProtocolInfo::*)()  const>(&XrdCl::ProtocolInfo::GetVersion));

    DEBUG_MSG("Adding wrapper for uint32_t XrdCl::ProtocolInfo::GetHostInfo() (" __HERE__ ")");
    // signature to use in the veto list: uint32_t XrdCl::ProtocolInfo::GetHostInfo()
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:373:16
    t.method("GetHostInfo", static_cast<uint32_t (XrdCl::ProtocolInfo::*)()  const>(&XrdCl::ProtocolInfo::GetHostInfo));

    DEBUG_MSG("Adding wrapper for bool XrdCl::ProtocolInfo::TestHostInfo(uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::ProtocolInfo::TestHostInfo(uint32_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClXRootDResponses.hh:381:12
    t.method("TestHostInfo", static_cast<bool (XrdCl::ProtocolInfo::*)(uint32_t) >(&XrdCl::ProtocolInfo::TestHostInfo));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::ProtocolInfo>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_ProtocolInfo(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_ProtocolInfo(module));
}
