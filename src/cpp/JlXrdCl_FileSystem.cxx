// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::FileSystem> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::FileSystem> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::FileSystem
// signature to use in the veto file: XrdCl::FileSystem
struct JlXrdCl_FileSystem: public Wrapper {

  JlXrdCl_FileSystem(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::FileSystem (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:202:9
    jlcxx::TypeWrapper<XrdCl::FileSystem>  t = jlModule.add_type<XrdCl::FileSystem>("XrdCl!FileSystem");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::FileSystem>>(new jlcxx::TypeWrapper<XrdCl::FileSystem>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;


    DEBUG_MSG("Adding wrapper for void XrdCl::FileSystem::FileSystem(const XrdCl::URL &, bool) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:216:7
    t.constructor<const XrdCl::URL &>(/*finalize=*/true);
    t.constructor<const XrdCl::URL &, bool>(/*finalize=*/true);

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Locate(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Locate(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:235:20
    t.method("Locate", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::Locate));
    t.method("Locate", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a.Locate(arg0, arg1, arg2); });
    t.method("Locate", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a->Locate(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Locate(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::LocationInfo *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Locate(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::LocationInfo *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:251:20
    t.method("Locate", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::LocationInfo *&, uint16_t) >(&XrdCl::FileSystem::Locate));
    t.method("Locate", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::LocationInfo *& arg2)->XrdCl::XRootDStatus { return a.Locate(arg0, arg1, arg2); });
    t.method("Locate", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::LocationInfo *& arg2)->XrdCl::XRootDStatus { return a->Locate(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::DeepLocate(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::DeepLocate(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:269:20
    t.method("DeepLocate", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::DeepLocate));
    t.method("DeepLocate", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a.DeepLocate(arg0, arg1, arg2); });
    t.method("DeepLocate", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a->DeepLocate(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::DeepLocate(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::LocationInfo *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::DeepLocate(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::LocationInfo *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:285:20
    t.method("DeepLocate", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::OpenFlags::Flags, XrdCl::LocationInfo *&, uint16_t) >(&XrdCl::FileSystem::DeepLocate));
    t.method("DeepLocate", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::LocationInfo *& arg2)->XrdCl::XRootDStatus { return a.DeepLocate(arg0, arg1, arg2); });
    t.method("DeepLocate", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::OpenFlags::Flags arg1, XrdCl::LocationInfo *& arg2)->XrdCl::XRootDStatus { return a->DeepLocate(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Mv(const std::string &, const std::string &, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Mv(const std::string &, const std::string &, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:301:20
    t.method("Mv", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, const std::string &, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::Mv));
    t.method("Mv", [](XrdCl::FileSystem& a, const std::string & arg0, const std::string & arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a.Mv(arg0, arg1, arg2); });
    t.method("Mv", [](XrdCl::FileSystem* a, const std::string & arg0, const std::string & arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a->Mv(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Mv(const std::string &, const std::string &, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Mv(const std::string &, const std::string &, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:316:20
    t.method("Mv", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, const std::string &, uint16_t) >(&XrdCl::FileSystem::Mv));
    t.method("Mv", [](XrdCl::FileSystem& a, const std::string & arg0, const std::string & arg1)->XrdCl::XRootDStatus { return a.Mv(arg0, arg1); });
    t.method("Mv", [](XrdCl::FileSystem* a, const std::string & arg0, const std::string & arg1)->XrdCl::XRootDStatus { return a->Mv(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Query(XrdCl::QueryCode::Code, const XrdCl::Buffer &, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Query(XrdCl::QueryCode::Code, const XrdCl::Buffer &, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:333:20
    t.method("Query", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(XrdCl::QueryCode::Code, const XrdCl::Buffer &, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::Query));
    t.method("Query", [](XrdCl::FileSystem& a, XrdCl::QueryCode::Code arg0, const XrdCl::Buffer & arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a.Query(arg0, arg1, arg2); });
    t.method("Query", [](XrdCl::FileSystem* a, XrdCl::QueryCode::Code arg0, const XrdCl::Buffer & arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a->Query(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Query(XrdCl::QueryCode::Code, const XrdCl::Buffer &, XrdCl::Buffer *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Query(XrdCl::QueryCode::Code, const XrdCl::Buffer &, XrdCl::Buffer *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:349:20
    t.method("Query", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(XrdCl::QueryCode::Code, const XrdCl::Buffer &, XrdCl::Buffer *&, uint16_t) >(&XrdCl::FileSystem::Query));
    t.method("Query", [](XrdCl::FileSystem& a, XrdCl::QueryCode::Code arg0, const XrdCl::Buffer & arg1, XrdCl::Buffer *& arg2)->XrdCl::XRootDStatus { return a.Query(arg0, arg1, arg2); });
    t.method("Query", [](XrdCl::FileSystem* a, XrdCl::QueryCode::Code arg0, const XrdCl::Buffer & arg1, XrdCl::Buffer *& arg2)->XrdCl::XRootDStatus { return a->Query(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Truncate(const std::string &, uint64_t, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Truncate(const std::string &, uint64_t, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:365:20
    t.method("Truncate", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, uint64_t, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::Truncate));
    t.method("Truncate", [](XrdCl::FileSystem& a, const std::string & arg0, uint64_t arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a.Truncate(arg0, arg1, arg2); });
    t.method("Truncate", [](XrdCl::FileSystem* a, const std::string & arg0, uint64_t arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a->Truncate(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Truncate(const std::string &, uint64_t, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Truncate(const std::string &, uint64_t, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:380:20
    t.method("Truncate", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, uint64_t, uint16_t) >(&XrdCl::FileSystem::Truncate));
    t.method("Truncate", [](XrdCl::FileSystem& a, const std::string & arg0, uint64_t arg1)->XrdCl::XRootDStatus { return a.Truncate(arg0, arg1); });
    t.method("Truncate", [](XrdCl::FileSystem* a, const std::string & arg0, uint64_t arg1)->XrdCl::XRootDStatus { return a->Truncate(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Rm(const std::string &, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Rm(const std::string &, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:394:20
    t.method("Rm", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::Rm));
    t.method("Rm", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a.Rm(arg0, arg1); });
    t.method("Rm", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a->Rm(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Rm(const std::string &, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Rm(const std::string &, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:407:20
    t.method("Rm", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, uint16_t) >(&XrdCl::FileSystem::Rm));
    t.method("Rm", [](XrdCl::FileSystem& a, const std::string & arg0)->XrdCl::XRootDStatus { return a.Rm(arg0); });
    t.method("Rm", [](XrdCl::FileSystem* a, const std::string & arg0)->XrdCl::XRootDStatus { return a->Rm(arg0); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::MkDir(const std::string &, XrdCl::MkDirFlags::Flags, XrdCl::Access::Mode, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::MkDir(const std::string &, XrdCl::MkDirFlags::Flags, XrdCl::Access::Mode, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:422:20
    t.method("MkDir", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::MkDirFlags::Flags, XrdCl::Access::Mode, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::MkDir));
    t.method("MkDir", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::MkDirFlags::Flags arg1, XrdCl::Access::Mode arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a.MkDir(arg0, arg1, arg2, arg3); });
    t.method("MkDir", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::MkDirFlags::Flags arg1, XrdCl::Access::Mode arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a->MkDir(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::MkDir(const std::string &, XrdCl::MkDirFlags::Flags, XrdCl::Access::Mode, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::MkDir(const std::string &, XrdCl::MkDirFlags::Flags, XrdCl::Access::Mode, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:439:20
    t.method("MkDir", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::MkDirFlags::Flags, XrdCl::Access::Mode, uint16_t) >(&XrdCl::FileSystem::MkDir));
    t.method("MkDir", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::MkDirFlags::Flags arg1, XrdCl::Access::Mode arg2)->XrdCl::XRootDStatus { return a.MkDir(arg0, arg1, arg2); });
    t.method("MkDir", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::MkDirFlags::Flags arg1, XrdCl::Access::Mode arg2)->XrdCl::XRootDStatus { return a->MkDir(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::RmDir(const std::string &, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::RmDir(const std::string &, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:454:20
    t.method("RmDir", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::RmDir));
    t.method("RmDir", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a.RmDir(arg0, arg1); });
    t.method("RmDir", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a->RmDir(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::RmDir(const std::string &, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::RmDir(const std::string &, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:467:20
    t.method("RmDir", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, uint16_t) >(&XrdCl::FileSystem::RmDir));
    t.method("RmDir", [](XrdCl::FileSystem& a, const std::string & arg0)->XrdCl::XRootDStatus { return a.RmDir(arg0); });
    t.method("RmDir", [](XrdCl::FileSystem* a, const std::string & arg0)->XrdCl::XRootDStatus { return a->RmDir(arg0); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::ChMod(const std::string &, XrdCl::Access::Mode, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::ChMod(const std::string &, XrdCl::Access::Mode, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:481:20
    t.method("ChMod", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::Access::Mode, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::ChMod));
    t.method("ChMod", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::Access::Mode arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a.ChMod(arg0, arg1, arg2); });
    t.method("ChMod", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::Access::Mode arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a->ChMod(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::ChMod(const std::string &, XrdCl::Access::Mode, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::ChMod(const std::string &, XrdCl::Access::Mode, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:496:20
    t.method("ChMod", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::Access::Mode, uint16_t) >(&XrdCl::FileSystem::ChMod));
    t.method("ChMod", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::Access::Mode arg1)->XrdCl::XRootDStatus { return a.ChMod(arg0, arg1); });
    t.method("ChMod", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::Access::Mode arg1)->XrdCl::XRootDStatus { return a->ChMod(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Ping(XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Ping(XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:509:20
    t.method("Ping", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::Ping));
    t.method("Ping", [](XrdCl::FileSystem& a, XrdCl::ResponseHandler * arg0)->XrdCl::XRootDStatus { return a.Ping(arg0); });
    t.method("Ping", [](XrdCl::FileSystem* a, XrdCl::ResponseHandler * arg0)->XrdCl::XRootDStatus { return a->Ping(arg0); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Ping(uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Ping(uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:520:20
    t.method("Ping", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(uint16_t) >(&XrdCl::FileSystem::Ping));
    t.method("Ping", [](XrdCl::FileSystem& a)->XrdCl::XRootDStatus { return a.Ping(); });
    t.method("Ping", [](XrdCl::FileSystem* a)->XrdCl::XRootDStatus { return a->Ping(); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Stat(const std::string &, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Stat(const std::string &, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:533:20
    t.method("Stat", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::Stat));
    t.method("Stat", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a.Stat(arg0, arg1); });
    t.method("Stat", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a->Stat(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Stat(const std::string &, XrdCl::StatInfo *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Stat(const std::string &, XrdCl::StatInfo *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:548:20
    t.method("Stat", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::StatInfo *&, uint16_t) >(&XrdCl::FileSystem::Stat));
    t.method("Stat", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::StatInfo *& arg1)->XrdCl::XRootDStatus { return a.Stat(arg0, arg1); });
    t.method("Stat", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::StatInfo *& arg1)->XrdCl::XRootDStatus { return a->Stat(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::StatVFS(const std::string &, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::StatVFS(const std::string &, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:564:20
    t.method("StatVFS", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::StatVFS));
    t.method("StatVFS", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a.StatVFS(arg0, arg1); });
    t.method("StatVFS", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a->StatVFS(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::StatVFS(const std::string &, XrdCl::StatInfoVFS *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::StatVFS(const std::string &, XrdCl::StatInfoVFS *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:578:20
    t.method("StatVFS", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::StatInfoVFS *&, uint16_t) >(&XrdCl::FileSystem::StatVFS));
    t.method("StatVFS", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::StatInfoVFS *& arg1)->XrdCl::XRootDStatus { return a.StatVFS(arg0, arg1); });
    t.method("StatVFS", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::StatInfoVFS *& arg1)->XrdCl::XRootDStatus { return a->StatVFS(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Protocol(XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Protocol(XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:593:20
    t.method("Protocol", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::Protocol));
    t.method("Protocol", [](XrdCl::FileSystem& a, XrdCl::ResponseHandler * arg0)->XrdCl::XRootDStatus { return a.Protocol(arg0); });
    t.method("Protocol", [](XrdCl::FileSystem* a, XrdCl::ResponseHandler * arg0)->XrdCl::XRootDStatus { return a->Protocol(arg0); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Protocol(XrdCl::ProtocolInfo *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Protocol(XrdCl::ProtocolInfo *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:605:20
    t.method("Protocol", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(XrdCl::ProtocolInfo *&, uint16_t) >(&XrdCl::FileSystem::Protocol));
    t.method("Protocol", [](XrdCl::FileSystem& a, XrdCl::ProtocolInfo *& arg0)->XrdCl::XRootDStatus { return a.Protocol(arg0); });
    t.method("Protocol", [](XrdCl::FileSystem* a, XrdCl::ProtocolInfo *& arg0)->XrdCl::XRootDStatus { return a->Protocol(arg0); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::DirList(const std::string &, XrdCl::DirListFlags::Flags, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::DirList(const std::string &, XrdCl::DirListFlags::Flags, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:621:20
    t.method("DirList", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::DirListFlags::Flags, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::DirList));
    t.method("DirList", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::DirListFlags::Flags arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a.DirList(arg0, arg1, arg2); });
    t.method("DirList", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::DirListFlags::Flags arg1, XrdCl::ResponseHandler * arg2)->XrdCl::XRootDStatus { return a->DirList(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::DirList(const std::string &, XrdCl::DirListFlags::Flags, XrdCl::DirectoryList *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::DirList(const std::string &, XrdCl::DirListFlags::Flags, XrdCl::DirectoryList *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:637:20
    t.method("DirList", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::DirListFlags::Flags, XrdCl::DirectoryList *&, uint16_t) >(&XrdCl::FileSystem::DirList));
    t.method("DirList", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::DirListFlags::Flags arg1, XrdCl::DirectoryList *& arg2)->XrdCl::XRootDStatus { return a.DirList(arg0, arg1, arg2); });
    t.method("DirList", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::DirListFlags::Flags arg1, XrdCl::DirectoryList *& arg2)->XrdCl::XRootDStatus { return a->DirList(arg0, arg1, arg2); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::SendCache(const std::string &, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::SendCache(const std::string &, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:654:20
    t.method("SendCache", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::SendCache));
    t.method("SendCache", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a.SendCache(arg0, arg1); });
    t.method("SendCache", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a->SendCache(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::SendCache(const std::string &, XrdCl::Buffer *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::SendCache(const std::string &, XrdCl::Buffer *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:668:20
    t.method("SendCache", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::Buffer *&, uint16_t) >(&XrdCl::FileSystem::SendCache));
    t.method("SendCache", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::Buffer *& arg1)->XrdCl::XRootDStatus { return a.SendCache(arg0, arg1); });
    t.method("SendCache", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::Buffer *& arg1)->XrdCl::XRootDStatus { return a->SendCache(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::SendInfo(const std::string &, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::SendInfo(const std::string &, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:684:20
    t.method("SendInfo", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::SendInfo));
    t.method("SendInfo", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a.SendInfo(arg0, arg1); });
    t.method("SendInfo", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::ResponseHandler * arg1)->XrdCl::XRootDStatus { return a->SendInfo(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::SendInfo(const std::string &, XrdCl::Buffer *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::SendInfo(const std::string &, XrdCl::Buffer *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:698:20
    t.method("SendInfo", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::string &, XrdCl::Buffer *&, uint16_t) >(&XrdCl::FileSystem::SendInfo));
    t.method("SendInfo", [](XrdCl::FileSystem& a, const std::string & arg0, XrdCl::Buffer *& arg1)->XrdCl::XRootDStatus { return a.SendInfo(arg0, arg1); });
    t.method("SendInfo", [](XrdCl::FileSystem* a, const std::string & arg0, XrdCl::Buffer *& arg1)->XrdCl::XRootDStatus { return a->SendInfo(arg0, arg1); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Prepare(const std::vector<std::string> &, XrdCl::PrepareFlags::Flags, uint8_t, XrdCl::ResponseHandler *, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Prepare(const std::vector<std::string> &, XrdCl::PrepareFlags::Flags, uint8_t, XrdCl::ResponseHandler *, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:716:20
    t.method("Prepare", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::vector<std::string> &, XrdCl::PrepareFlags::Flags, uint8_t, XrdCl::ResponseHandler *, uint16_t) >(&XrdCl::FileSystem::Prepare));
    t.method("Prepare", [](XrdCl::FileSystem& a, const std::vector<std::string> & arg0, XrdCl::PrepareFlags::Flags arg1, uint8_t arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a.Prepare(arg0, arg1, arg2, arg3); });
    t.method("Prepare", [](XrdCl::FileSystem* a, const std::vector<std::string> & arg0, XrdCl::PrepareFlags::Flags arg1, uint8_t arg2, XrdCl::ResponseHandler * arg3)->XrdCl::XRootDStatus { return a->Prepare(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for XrdCl::XRootDStatus XrdCl::FileSystem::Prepare(const std::vector<std::string> &, XrdCl::PrepareFlags::Flags, uint8_t, XrdCl::Buffer *&, uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: XrdCl::XRootDStatus XrdCl::FileSystem::Prepare(const std::vector<std::string> &, XrdCl::PrepareFlags::Flags, uint8_t, XrdCl::Buffer *&, uint16_t)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:734:20
    t.method("Prepare", static_cast<XrdCl::XRootDStatus (XrdCl::FileSystem::*)(const std::vector<std::string> &, XrdCl::PrepareFlags::Flags, uint8_t, XrdCl::Buffer *&, uint16_t) >(&XrdCl::FileSystem::Prepare));
    t.method("Prepare", [](XrdCl::FileSystem& a, const std::vector<std::string> & arg0, XrdCl::PrepareFlags::Flags arg1, uint8_t arg2, XrdCl::Buffer *& arg3)->XrdCl::XRootDStatus { return a.Prepare(arg0, arg1, arg2, arg3); });
    t.method("Prepare", [](XrdCl::FileSystem* a, const std::vector<std::string> & arg0, XrdCl::PrepareFlags::Flags arg1, uint8_t arg2, XrdCl::Buffer *& arg3)->XrdCl::XRootDStatus { return a->Prepare(arg0, arg1, arg2, arg3); });

    DEBUG_MSG("Adding wrapper for bool XrdCl::FileSystem::SetProperty(const std::string &, const std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::FileSystem::SetProperty(const std::string &, const std::string &)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:871:12
    t.method("SetProperty", static_cast<bool (XrdCl::FileSystem::*)(const std::string &, const std::string &) >(&XrdCl::FileSystem::SetProperty));

    DEBUG_MSG("Adding wrapper for bool XrdCl::FileSystem::GetProperty(const std::string &, std::string &) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::FileSystem::GetProperty(const std::string &, std::string &)
    // defined in /Users/mato/.julia/artifacts/d6b4bfcd1db9f33711a4c083d9d997b32d266141/include/xrootd/XrdCl/XrdClFileSystem.hh:878:12
    t.method("GetProperty", static_cast<bool (XrdCl::FileSystem::*)(const std::string &, std::string &)  const>(&XrdCl::FileSystem::GetProperty));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::FileSystem>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_FileSystem(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_FileSystem(module));
}
