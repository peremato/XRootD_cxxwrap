// this file was auto-generated by wrapit v1.3.1-dirty
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<iovec> : std::false_type { };
  template<> struct DefaultConstructible<iovec> : std::false_type { };
}

// Class generating the wrapper for type iovec
// signature to use in the veto file: iovec
struct Jliovec: public Wrapper {

  Jliovec(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type iovec (" __HERE__ ")");
    // defined in /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_iovec_t.h:31:8
    jlcxx::TypeWrapper<iovec>  t = jlModule.add_type<iovec>("iovec");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<iovec>>(new jlcxx::TypeWrapper<iovec>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/true);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<iovec>> type_;
};
std::shared_ptr<Wrapper> newJliovec(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new Jliovec(module));
}
