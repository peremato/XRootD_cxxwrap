// this file was auto-generated by wrapit 5168a24
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::MkDirFlags> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::MkDirFlags> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::MkDirFlags
// signature to use in the veto file: XrdCl::MkDirFlags
struct JlXrdCl_MkDirFlags: public Wrapper {

  JlXrdCl_MkDirFlags(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::MkDirFlags (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClFileSystem.hh:140:10
    jlcxx::TypeWrapper<XrdCl::MkDirFlags>  t = jlModule.add_type<XrdCl::MkDirFlags>("XrdCl!MkDirFlags");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::MkDirFlags>>(new jlcxx::TypeWrapper<XrdCl::MkDirFlags>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::MkDirFlags>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_MkDirFlags(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_MkDirFlags(module));
}
