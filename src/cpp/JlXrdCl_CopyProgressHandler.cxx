// this file was auto-generated by wrapit 5168a24
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::CopyProgressHandler> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::CopyProgressHandler> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::CopyProgressHandler
// signature to use in the veto file: XrdCl::CopyProgressHandler
struct JlXrdCl_CopyProgressHandler: public Wrapper {

  JlXrdCl_CopyProgressHandler(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::CopyProgressHandler (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClCopyProcess.hh:41:9
    jlcxx::TypeWrapper<XrdCl::CopyProgressHandler>  t = jlModule.add_type<XrdCl::CopyProgressHandler>("XrdCl!CopyProgressHandler");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::CopyProgressHandler>>(new jlcxx::TypeWrapper<XrdCl::CopyProgressHandler>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes);

    DEBUG_MSG("Adding wrapper for void XrdCl::CopyProgressHandler::BeginJob(uint16_t, uint16_t, const XrdCl::URL *, const XrdCl::URL *) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::CopyProgressHandler::BeginJob(uint16_t, uint16_t, const XrdCl::URL *, const XrdCl::URL *)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClCopyProcess.hh:54:20
    t.method("BeginJob", static_cast<void (XrdCl::CopyProgressHandler::*)(uint16_t, uint16_t, const XrdCl::URL *, const XrdCl::URL *) >(&XrdCl::CopyProgressHandler::BeginJob));

    DEBUG_MSG("Adding wrapper for void XrdCl::CopyProgressHandler::EndJob(uint16_t, const XrdCl::PropertyList *) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::CopyProgressHandler::EndJob(uint16_t, const XrdCl::PropertyList *)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClCopyProcess.hh:68:20
    t.method("EndJob", static_cast<void (XrdCl::CopyProgressHandler::*)(uint16_t, const XrdCl::PropertyList *) >(&XrdCl::CopyProgressHandler::EndJob));

    DEBUG_MSG("Adding wrapper for void XrdCl::CopyProgressHandler::JobProgress(uint16_t, uint64_t, uint64_t) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::CopyProgressHandler::JobProgress(uint16_t, uint64_t, uint64_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClCopyProcess.hh:82:20
    t.method("JobProgress", static_cast<void (XrdCl::CopyProgressHandler::*)(uint16_t, uint64_t, uint64_t) >(&XrdCl::CopyProgressHandler::JobProgress));

    DEBUG_MSG("Adding wrapper for bool XrdCl::CopyProgressHandler::ShouldCancel(uint16_t) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::CopyProgressHandler::ShouldCancel(uint16_t)
    // defined in /Users/mato/.julia/artifacts/8520a52585f5eadf78b58f2d486d1abb34f514f1/include/xrootd/XrdCl/XrdClCopyProcess.hh:92:20
    t.method("ShouldCancel", static_cast<bool (XrdCl::CopyProgressHandler::*)(uint16_t) >(&XrdCl::CopyProgressHandler::ShouldCancel));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::CopyProgressHandler>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_CopyProgressHandler(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_CopyProgressHandler(module));
}
