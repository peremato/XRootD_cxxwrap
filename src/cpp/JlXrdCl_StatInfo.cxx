// this file was auto-generated by wrapit v1.6.0
#include "Wrapper.h"

#include "jlXRootD.h"
#include "dbg_msg.h"
#include "jlcxx/functions.hpp"
#include "jlcxx/stl.hpp"

namespace jlcxx {
  template<> struct IsMirroredType<XrdCl::StatInfo> : std::false_type { };
  template<> struct DefaultConstructible<XrdCl::StatInfo> : std::false_type { };
}

// Class generating the wrapper for type XrdCl::StatInfo
// signature to use in the veto file: XrdCl::StatInfo
struct JlXrdCl_StatInfo: public Wrapper {

  JlXrdCl_StatInfo(jlcxx::Module& jlModule): Wrapper(jlModule){
    DEBUG_MSG("Adding wrapper for type XrdCl::StatInfo (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:400:9
    jlcxx::TypeWrapper<XrdCl::StatInfo>  t = jlModule.add_type<XrdCl::StatInfo>("XrdCl!StatInfo");
    type_ = std::unique_ptr<jlcxx::TypeWrapper<XrdCl::StatInfo>>(new jlcxx::TypeWrapper<XrdCl::StatInfo>(jlModule, t));
  }

  void add_methods() const{
    auto& t = *type_;
    t.template constructor<>(/*finalize=*/jlcxx::finalize_policy::yes    );


    DEBUG_MSG("Adding wrapper for void XrdCl::StatInfo::StatInfo(const std::string &, uint64_t, uint32_t, uint64_t) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:427:7
    t.constructor<const std::string &, uint64_t, uint32_t, uint64_t>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("id"), jlcxx::arg("size"), jlcxx::arg("flags"), jlcxx::arg("modTime")    );


    DEBUG_MSG("Adding wrapper for void XrdCl::StatInfo::StatInfo(const XrdCl::StatInfo &) (" __HERE__ ")");
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:433:7
    t.constructor<const XrdCl::StatInfo &>(/*finalize=*/jlcxx::finalize_policy::yes, jlcxx::arg("this"), jlcxx::arg("info")    );

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::StatInfo::GetId() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::StatInfo::GetId()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:443:26
    t.method("GetId", [](XrdCl::StatInfo const& a)->const std::string & { return a.GetId(); }, jlcxx::arg("this"));
    t.method("GetId", [](XrdCl::StatInfo const* a)->const std::string & { return a->GetId(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for uint64_t XrdCl::StatInfo::GetSize() (" __HERE__ ")");
    // signature to use in the veto list: uint64_t XrdCl::StatInfo::GetSize()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:448:16
    t.method("GetSize", [](XrdCl::StatInfo const& a)->uint64_t { return a.GetSize(); }, jlcxx::arg("this"));
    t.method("GetSize", [](XrdCl::StatInfo const* a)->uint64_t { return a->GetSize(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void XrdCl::StatInfo::SetSize(uint64_t) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::StatInfo::SetSize(uint64_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:453:12
    t.method("SetSize", [](XrdCl::StatInfo& a, uint64_t arg0)->void { a.SetSize(arg0); }, jlcxx::arg("this"), jlcxx::arg("size"));
    t.method("SetSize", [](XrdCl::StatInfo* a, uint64_t arg0)->void { a->SetSize(arg0); }, jlcxx::arg("this"), jlcxx::arg("size"));

    DEBUG_MSG("Adding wrapper for uint32_t XrdCl::StatInfo::GetFlags() (" __HERE__ ")");
    // signature to use in the veto list: uint32_t XrdCl::StatInfo::GetFlags()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:458:16
    t.method("GetFlags", [](XrdCl::StatInfo const& a)->uint32_t { return a.GetFlags(); }, jlcxx::arg("this"));
    t.method("GetFlags", [](XrdCl::StatInfo const* a)->uint32_t { return a->GetFlags(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for void XrdCl::StatInfo::SetFlags(uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: void XrdCl::StatInfo::SetFlags(uint32_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:463:12
    t.method("SetFlags", [](XrdCl::StatInfo& a, uint32_t arg0)->void { a.SetFlags(arg0); }, jlcxx::arg("this"), jlcxx::arg("flags"));
    t.method("SetFlags", [](XrdCl::StatInfo* a, uint32_t arg0)->void { a->SetFlags(arg0); }, jlcxx::arg("this"), jlcxx::arg("flags"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::StatInfo::TestFlags(uint32_t) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::StatInfo::TestFlags(uint32_t)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:468:12
    t.method("TestFlags", [](XrdCl::StatInfo const& a, uint32_t arg0)->bool { return a.TestFlags(arg0); }, jlcxx::arg("this"), jlcxx::arg("flags"));
    t.method("TestFlags", [](XrdCl::StatInfo const* a, uint32_t arg0)->bool { return a->TestFlags(arg0); }, jlcxx::arg("this"), jlcxx::arg("flags"));

    DEBUG_MSG("Adding wrapper for uint64_t XrdCl::StatInfo::GetModTime() (" __HERE__ ")");
    // signature to use in the veto list: uint64_t XrdCl::StatInfo::GetModTime()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:473:16
    t.method("GetModTime", [](XrdCl::StatInfo const& a)->uint64_t { return a.GetModTime(); }, jlcxx::arg("this"));
    t.method("GetModTime", [](XrdCl::StatInfo const* a)->uint64_t { return a->GetModTime(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::StatInfo::GetModTimeAsString() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::StatInfo::GetModTimeAsString()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:478:19
    t.method("GetModTimeAsString", [](XrdCl::StatInfo const& a)->std::string { return a.GetModTimeAsString(); }, jlcxx::arg("this"));
    t.method("GetModTimeAsString", [](XrdCl::StatInfo const* a)->std::string { return a->GetModTimeAsString(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for uint64_t XrdCl::StatInfo::GetChangeTime() (" __HERE__ ")");
    // signature to use in the veto list: uint64_t XrdCl::StatInfo::GetChangeTime()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:483:16
    t.method("GetChangeTime", [](XrdCl::StatInfo const& a)->uint64_t { return a.GetChangeTime(); }, jlcxx::arg("this"));
    t.method("GetChangeTime", [](XrdCl::StatInfo const* a)->uint64_t { return a->GetChangeTime(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::StatInfo::GetChangeTimeAsString() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::StatInfo::GetChangeTimeAsString()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:488:19
    t.method("GetChangeTimeAsString", [](XrdCl::StatInfo const& a)->std::string { return a.GetChangeTimeAsString(); }, jlcxx::arg("this"));
    t.method("GetChangeTimeAsString", [](XrdCl::StatInfo const* a)->std::string { return a->GetChangeTimeAsString(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for uint64_t XrdCl::StatInfo::GetAccessTime() (" __HERE__ ")");
    // signature to use in the veto list: uint64_t XrdCl::StatInfo::GetAccessTime()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:493:16
    t.method("GetAccessTime", [](XrdCl::StatInfo const& a)->uint64_t { return a.GetAccessTime(); }, jlcxx::arg("this"));
    t.method("GetAccessTime", [](XrdCl::StatInfo const* a)->uint64_t { return a->GetAccessTime(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for std::string XrdCl::StatInfo::GetAccessTimeAsString() (" __HERE__ ")");
    // signature to use in the veto list: std::string XrdCl::StatInfo::GetAccessTimeAsString()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:498:19
    t.method("GetAccessTimeAsString", [](XrdCl::StatInfo const& a)->std::string { return a.GetAccessTimeAsString(); }, jlcxx::arg("this"));
    t.method("GetAccessTimeAsString", [](XrdCl::StatInfo const* a)->std::string { return a->GetAccessTimeAsString(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::StatInfo::GetModeAsString() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::StatInfo::GetModeAsString()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:503:26
    t.method("GetModeAsString", [](XrdCl::StatInfo const& a)->const std::string & { return a.GetModeAsString(); }, jlcxx::arg("this"));
    t.method("GetModeAsString", [](XrdCl::StatInfo const* a)->const std::string & { return a->GetModeAsString(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const std::string XrdCl::StatInfo::GetModeAsOctString() (" __HERE__ ")");
    // signature to use in the veto list: const std::string XrdCl::StatInfo::GetModeAsOctString()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:508:25
    t.method("GetModeAsOctString", [](XrdCl::StatInfo const& a)->const std::string { return a.GetModeAsOctString(); }, jlcxx::arg("this"));
    t.method("GetModeAsOctString", [](XrdCl::StatInfo const* a)->const std::string { return a->GetModeAsOctString(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::StatInfo::GetOwner() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::StatInfo::GetOwner()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:513:26
    t.method("GetOwner", [](XrdCl::StatInfo const& a)->const std::string & { return a.GetOwner(); }, jlcxx::arg("this"));
    t.method("GetOwner", [](XrdCl::StatInfo const* a)->const std::string & { return a->GetOwner(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::StatInfo::GetGroup() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::StatInfo::GetGroup()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:518:26
    t.method("GetGroup", [](XrdCl::StatInfo const& a)->const std::string & { return a.GetGroup(); }, jlcxx::arg("this"));
    t.method("GetGroup", [](XrdCl::StatInfo const* a)->const std::string & { return a->GetGroup(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for const std::string & XrdCl::StatInfo::GetChecksum() (" __HERE__ ")");
    // signature to use in the veto list: const std::string & XrdCl::StatInfo::GetChecksum()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:523:26
    t.method("GetChecksum", [](XrdCl::StatInfo const& a)->const std::string & { return a.GetChecksum(); }, jlcxx::arg("this"));
    t.method("GetChecksum", [](XrdCl::StatInfo const* a)->const std::string & { return a->GetChecksum(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::StatInfo::ParseServerResponse(const char *) (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::StatInfo::ParseServerResponse(const char *)
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:528:12
    t.method("ParseServerResponse", [](XrdCl::StatInfo& a, const char * arg0)->bool { return a.ParseServerResponse(arg0); }, jlcxx::arg("this"), jlcxx::arg("data"));
    t.method("ParseServerResponse", [](XrdCl::StatInfo* a, const char * arg0)->bool { return a->ParseServerResponse(arg0); }, jlcxx::arg("this"), jlcxx::arg("data"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::StatInfo::ExtendedFormat() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::StatInfo::ExtendedFormat()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:533:12
    t.method("ExtendedFormat", [](XrdCl::StatInfo const& a)->bool { return a.ExtendedFormat(); }, jlcxx::arg("this"));
    t.method("ExtendedFormat", [](XrdCl::StatInfo const* a)->bool { return a->ExtendedFormat(); }, jlcxx::arg("this"));

    DEBUG_MSG("Adding wrapper for bool XrdCl::StatInfo::HasChecksum() (" __HERE__ ")");
    // signature to use in the veto list: bool XrdCl::StatInfo::HasChecksum()
    // defined in /Users/mato/.julia/artifacts/d7f8626a7055397045bff10d1f18132236662705/include/xrootd/XrdCl/XrdClXRootDResponses.hh:538:12
    t.method("HasChecksum", [](XrdCl::StatInfo const& a)->bool { return a.HasChecksum(); }, jlcxx::arg("this"));
    t.method("HasChecksum", [](XrdCl::StatInfo const* a)->bool { return a->HasChecksum(); }, jlcxx::arg("this"));
  }

private:
  std::unique_ptr<jlcxx::TypeWrapper<XrdCl::StatInfo>> type_;
};
std::shared_ptr<Wrapper> newJlXrdCl_StatInfo(jlcxx::Module& module){
  return std::shared_ptr<Wrapper>(new JlXrdCl_StatInfo(module));
}
